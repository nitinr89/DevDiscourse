@model Devdiscourse.Models.Others.NewsWireModel
@{
    ViewBag.Title = "Press Release";
    Layout = "~/Views/Shared/_Layout _plain.cshtml";
}
<link href="~/Content/jquery.multiselect.css" rel="stylesheet" />
<link href="~/Content/admin.css" rel="stylesheet" />
<link href="~/Scripts/tagsInput/css/jquery.tagsinput.min.css" rel="stylesheet" />
<div class="container bg-white m-t-10 m-b-10 p-b-10 p-t-10">
    <ol class="breadcrumb no-margin">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")">Admin</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("ContentList", "NewsWire")">Press Release</a></li>
        <li class="breadcrumb-item active">Approval</li>
    </ol>
</div>
<div class="container no-padding m-b-30">
    @using (Html.BeginForm("Edit", "NewsWire", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="bg-white box-shadow m-t-40 p-b-10">
                <div class="label-tag">Content</div>
                <div class="p-20">
                    <div class="row m-t-20">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control inputText" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            <div id="title_character"></div>
                        </div>
                    </div>
                    <div class="row m-t-20">
                        @Html.LabelFor(model => model.SubTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SubTitle, new { htmlAttributes = new { @class = "form-control inputText" } })
                            @Html.ValidationMessageFor(model => model.SubTitle, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row m-t-20">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", style = "height:120px;" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            <div id="wordCount">[ Words entered: 0 ]</div>
                        </div>
                    </div>
                    <div class="row m-t-20">
                        <div class="col-sm-6 col-xs-12">
                            <div class="row">
                                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    <select class="form-control" id="Type" name="Type">
                                        <option value="News">News</option>
                                        <option value="Blog">Blog</option>
                                        <option value="Analysis">Analysis</option>
                                        <option value="Opinion">Opinion</option>
                                    </select>
                                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6 col-xs-12">
                            <div class="row">
                                @Html.LabelFor(model => model.Source, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Source, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row m-t-20">
                        <label class="control-label col-md-2">Author Image</label>
                        <div class="col-md-6">
                            <div style="width:100px;margin-bottom:10px" id="author-img"><img class="img-responsive" src="@Model.AuthorImage" /></div>
                            <input type="file" class="form-control" id="ThemeImg" accept="image/*" />
                            @Html.HiddenFor(model => model.AuthorImage)
                        </div>
                        <div class="col-md-4"><button type="button" class="btn btn-danger" id="removeImage">Remove Author Image</button></div>
                        </div>
                    </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-6">
                    <div class="bg-white box-shadow m-t-40">
                        <div class="label-tag">Location</div>
                        <div class="p-20">
                            <div class="row m-t-10">
                                <div class="col-sm-6 col-xs-12">
                                    @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label" })
                                    <div class="">
                                        <div id="RegionList" class="showListDiv"></div>
                                        <input type="text" class="form-control hidden" id="Region" name="Region" />
                                        @Html.DropDownList("Region", null, htmlAttributes: new { @class = "form-control", id = "Region_multi", @multiple = "multiple" })
                                        @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-sm-6 col-xs-12">
                                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label" })
                                    <div class="">
                                        <div id="CountryList" class="showListDiv"></div>
                                        <input type="text" class="form-control hidden" id="Country" name="Country" />
                                        <select class="form-control" id="Country_multi" multiple="multiple" style="height:100px"></select>
                                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-sm-12 col-xs-12">
                                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
                                    <div class="">
                                       @Html.EditorFor(model=>model.City, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">
                    <div class="bg-white box-shadow m-t-40 p-b-20">
                        <div class="label-tag">Sector/Label</div>
                        <div class="p-20">
                            <div class="row m-t-10">
                                <div class="col-sm-6 col-xs-12">
                                    @Html.LabelFor(model => model.Sector, htmlAttributes: new { @class = "control-label" })
                                    <div class="">
                                        <div id="SectorList" class="showListDiv"></div>
                                        <input type="text" class="form-control hidden" value="0" id="Sector" name="Sector" />
                                        @Html.DropDownList("Sector", null, htmlAttributes: new { @class = "form-control", id = "Sector_multi", @multiple = "multiple" })
                                        @Html.ValidationMessageFor(model => model.Sector, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-sm-6 col-xs-12">
                                    @Html.LabelFor(model => model.NewsLabels, htmlAttributes: new { @class = "control-label" })
                                    <div class="">
                                        @Html.DropDownList("NewsLabels", null, "Select", htmlAttributes: new { @class = "form-control", @size = "26" })
                                        @Html.ValidationMessageFor(model => model.NewsLabels, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-white box-shadow m-t-40 p-b-10">
                <div class="label-tag">Tags</div>
                <div class="p-20">
                    <div class="m-t-20">
                        @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control input-tags" } })
                        @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6 col-xs-12">
                    <div class="bg-white box-shadow m-t-40 p-b-10">
                        <div class="label-tag">Image</div>
                        <div class="p-20">
                            <div class="row m-t-20">
                                <div class="col-xs-12 col-sm-12 col-md-6 m-b-20" id="viewImage">
                                    @if (!String.IsNullOrEmpty(Model.ImageUrl))
                                    {
                                        var newsImage = Model.ImageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? "/remote.axd?" + Model.ImageUrl : Model.ImageUrl;
                                        <img src="~/Content/transparent.png" data-src="@newsImage?width=240&height=180&mode=crop" style="max-width:240px;" class="img-responsive lazy" />
                                    }
                                    else
                                    {
                                        <img src="~/Content/transparent.png" data-src="~/images/newstheme.jpg?width=240&height=180&mode=crop" style="max-width:240px;" class="img-responsive lazy" />
                                    }
                                </div>
                                <div class="col-xs-12 col-sm-12 col-md-6">
                                    <div class="row p-t-10">
                                        <div class="col-md-12">
                                            @Html.HiddenFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                                            <input type="file" class="form-control" id="ImageUrlUpdate" name="ImageUrlUpdate" />
                                            @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-md-12 text-center m-t-10">
                                            <strong>OR</strong>
                                        </div>
                                        <div class="col-md-12 m-t-20">
                                            <input type="button" class="btn btn-primary btn-block" value="Choose image from gallery" id="selFromGallery" />
                                            <input type="text" class="form-control hidden" id="ChooseImage" name="ChooseImage" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row m-t-20">
                                @Html.LabelFor(model => model.ImageCopyright, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.ImageCopyright, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ImageCopyright, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-xs-12">
                    <div class="bg-white box-shadow m-t-40">
                        <div class="label-tag">Other Inputs</div>
                        <div class="row p-t-40 p-b-20">
                            @if (!String.IsNullOrEmpty(Model.VideoUrl))
                            {
                                <div class="col-md-3 text-right">
                                    @Html.LabelFor(model => model.VideoUrl, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-9 p-b-10">
                                    <video src="/remote.axd?@Model.VideoUrl" controls>
                                        Your browser does not support the video tag.
                                    </video>
                                </div>
                            }
                            <div class="">
                                @Html.HiddenFor(model => model.VideoUrl, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.VideoUrl, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-12 m-t-20">
                                @Html.LabelFor(model => model.PublishedDate, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.PublishedDate, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PublishedDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12 m-t-20">
                                @Html.LabelFor(model => model.ReasonofReject, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.ReasonofReject, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ReasonofReject, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="m-t-20">
                        <input type="submit" value="Publish" name="publishbtn" class="btn btn-primary" style="padding:8px 30px; font-size:16px;" />
                        <input type="submit" value="Reject" name="rejectbtn" class="btn btn-primary" style="padding:8px 30px; font-size:16px;margin-left:20px;" />
                    </div>
                </div>
            </div>
            @Html.HiddenFor(model => model.Creator)
            @Html.HiddenFor(model => model.CreatedOn)
        </div>
    }
</div>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" style="z-index:700000">
    <div class="modal-dialog" role="document">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <span class="pull-right fa fa-times cursor-pointer p-10" id="closeBtn"></span>
                <h3 class="no-margin">Image Gallery</h3>
            </div>
            <div class="modal-body m-b-20" style="overflow:auto; height:700px;">
                <div class="p-b-20">
                    <div class="row p-b-10" style="border-bottom:1px solid #eee">
                        <div class="col-lg-12 col-md-12"><h4>Search Filters</h4></div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <input id="inputText" class="form-control" type="text" list="suggestList" />
                            <datalist id="suggestList">
                                <option value="Breaking">Breaking</option>
                            </datalist>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <select class="form-control" id="selSector">
                                <option value="0">All Sector</option>
                                @* @{ Html.RenderAction("GetSectorMenu", "Home", new { filter = "AdminPage" });} *@
                                @await Component.InvokeAsync("SectorMenu", new { filter = "AdminPage" });
                            </select>
                        </div>
                    </div>
                </div>
                <div id="savedImages"></div>
                <div class="text-center loadmore f-16" style="display:none;"><span class="fa fa-circle-o-notch fa-spin fa-fw"></span>Loading</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="newModal" tabindex="-1" role="dialog" style="z-index:700000">
    <div class="modal-dialog" role="document">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <span class="pull-right fa fa-times cursor-pointer p-10" id="cancelBtn"></span>
                <h3 class="no-margin">Image Gallery</h3>
            </div>
            <div class="modal-body m-b-20" style="overflow:auto; height:700px;">
                <div class="p-b-20">
                    <div class="row p-b-10" style="border-bottom:1px solid #eee">
                        <div class="col-lg-12 col-md-12"><h4>Search Filters</h4></div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <input id="textInput" class="form-control" type="text" list="suggList" />
                            <datalist id="suggList">
                                <option value="Breaking">Breaking</option>
                            </datalist>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <select class="form-control" id="selSec">
                                <option value="0">All Sector</option>
                                @* @{ Html.RenderAction("GetSectorMenu", "Home", new { filter = "AdminPage" });} *@
                                @await Component.InvokeAsync("SectorMenu", new { filter = "AdminPage" });
                            </select>
                        </div>
                    </div>
                </div>
                <div id="imageList"></div>
                <div class="text-center loadmore f-16" style="display:none;"><span class="fa fa-circle-o-notch fa-spin fa-fw"></span>Loading</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/jquery.multiselect.js"></script>
    <script src="~/Scripts/tagsInput/js/jquery-tagsinput1.3.6jquery.tagsinput.min.js"></script>
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script>
        $(document).ready(function () {
            var _region = "Global Edition";
            var _skip = 0;
            var _sector = "";
            var _title = "";
            var _imgTitle = "";
            var _imgName = "";
            var _imgUrl = "";
            var _imgSector = "0";
            var _country = '@(Model.Country)';
            var _selRegion = '@(Model.Region)';
            var _selSector = '@(Model.Sector)';
            var _type = '@(Model.Type)';

            // Select Type
            $('#Type').val(_type);

            $('.lazy').lazy();
            $('.input-tags').tagsInput();
            $("#removeImage").click(function () {
                $("#author-img").html('');
                $("#AuthorImage").val('');
            });
            //Author Image
            $("#ThemeImg").change(function () {
                // Checking whether FormData is available in browser
                if (window.FormData !== undefined) {
                    var fileUpload = $("#ThemeImg").get(0);
                    var files = fileUpload.files;
                    // Create FormData object
                    var fileData = new FormData();
                    if (files[0].size > parseInt(4048576)) {
                        //show an alert to the user
                        alert("File size must be less than 4MB", "danger");
                    }
                    else {
                        // Looping over all files and add it to FormData object
                        for (var i = 0; i < files.length; i++) {
                            fileData.append(files[i].name, files[i]);
                        }
                        $.ajax({
                            url: '/UserFiles/UploadAuthorImage',
                            type: "POST",
                            contentType: false, // Not to set any content header
                            processData: false, // Not to process data
                            data: fileData,
                            success: function (data) {
                                if (data == "Error") {
                                    showAlert('Something went wrong!', "danger")
                                } else {
                                    $("#AuthorImage").val(data);
                                    $('#author-img').html('<img src=' + data + ' class="img-responsive" />');
                                }
                            },
                            error: function (err) {
                                showAlert('Something went wrong!', "danger")
                            }
                        });
                    }
                }
                else {
                    alert("FormData is not supported.");
                }
            });
            tinymce.init({
                selector: '#Description',
                height: 300,
                menubar: false,
                relative_urls: false,
                remove_script_host: false,
                invalid_elements: 'br',
                //entity_encoding: 'raw',
                convert_urls: true,
                plugins: [
                    'advlist autolink lists link image charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen wordcount',
                    'insertdatetime media table contextmenu paste textcolor colorpicker imagetools'
                ],
                setup: function (ed) {
                    ed.on('init', function () {
                        this.getDoc().body.style.fontFamily = 'sans-serif';
                    });
                    ed.on('keyup', function (evt) {
                        var theEditor = tinymce.activeEditor;
                        var wordCount = theEditor.plugins.wordcount.getCount();
                        $("#wordCount").html("[ Words entered: " + wordCount + " ]");
                    });
                    ed.addButton('mybutton', {
                        text: '✓',
                        title: "Strip html",
                        icon: false,
                        onclick: function () {
                            ed.setContent($(ed.getContent()).text());
                        }
                    });
                    ed.addButton('ecButton', {
                        text: 'EC',
                        title: "Embed Code",
                        icon: false,
                        onclick: function () {
                            ed.windowManager.open({
                                title: 'Embed Code',
                                width: 300,
                                height: 90,
                                body: [
                                    { type: 'textbox', name: 'code', multiline: true, label: '' }
                                ],
                                onsubmit: function (e) {
                                    ed.execCommand('mceInsertContent', false, e.data.code);
                                }
                            });
                        }
                    });
                },
                toolbar: 'undo redo | styleselect | table charmap | forecolor backcolor | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | removeformat pastetext | code | print | mybutton ecButton',
                imagetools_cors_hosts: ['www.tinymce.com', 'http://localhost:61834']
            });
            // For Multiple Select
            $('#Sector_multi').multiselect();
            $('#Region_multi').multiselect();
            // For Sector
            $('#Sector').val(_selSector);
            var sectorArray = _selSector.split(",");
            $.each(sectorArray, function (i, item) {
                var sectorValue = item.split(" ").join("_");
                var _itemList = [];
                $("#Sector_multi_" + sectorValue).prop("checked", "checked");
                $("input[name='Sector_multi[]']:checked").each(function () {
                    _itemList.push($('label[for="' + this.id + '"]').text());
                });
                $("#SectorList").html(_itemList.join(", "));
            });
            $('input[name="Sector_multi[]"]').on("change", function () {
                var valueArray = [];
                var textArray = [];
                $("input[name='Sector_multi[]']:checked").each(function () {
                    valueArray.push($(this).val().toString());
                    textArray.push($('label[for="' + this.id + '"]').text());
                });
                if (valueArray == "") {
                    $("#Sector").val("0");
                }
                else {
                    $("#Sector").val(valueArray);
                }
                $("#SectorList").html(textArray.join(", "));
                _selSector = valueArray;
            });
            // For Region
            $('#Region').val(_selRegion);
            var regionArray = _selRegion.split(",");
            $.each(regionArray, function (i, item) {
                var regionValue = item.split(" ").join("_");
                var _itemList = [];
                $("#Region_multi_" + regionValue).prop("checked", "checked");
                $("input[name='Region_multi[]']:checked").each(function () {
                    _itemList.push($('label[for="' + this.id + '"]').text());
                });
                $("#RegionList").html(_itemList.join(", "));
            });
            $('input[name="Region_multi[]"]').on("change", function () {
                var valueArray = [];
                $("input[name='Region_multi[]']:checked").each(function () {
                    valueArray.push($('label[for="' + this.id + '"]').text());
                });
                $("#Region").val(valueArray);
                $("#RegionList").html(valueArray.join(", "));
                _selRegion = valueArray.toString();
                getCountries();
            });
            getCountries();
            function getCountries() {
                $.ajax({
                    url: '/Home/GetCountry',
                    type: 'Post',
                    data: { region: _selRegion },
                    dataType: 'Json',
                    success: function (data) {
                        $('#Country_multi').replaceWith(' <select class="form-control" id="Country_multi" multiple="multiple" style="height:100px"></select>');
                        $.each(data, function (i, item) {
                            $('#Country_multi').append('<option value="' + item.title + '">' + item.title + '</option>');
                        });
                        $('#Country_multi').multiselect('refresh');
                        $('.actionButtons').hide();
                        // Auto select Country
                        $('#Country').val(_country);
                        var _carray = _country.split(",");
                        $.each(_carray, function (i, item) {
                            var _value = item.split(" ").join("_");
                            var _itemList = [];
                            $("#Country_multi_" + _value).prop("checked", "checked");
                            $("input[name='Country_multi[]']:checked").each(function () {
                                _itemList.push($('label[for="' + this.id + '"]').text());
                            });
                            $("#CountryList").html(_itemList.join(", "));
                        });
                        $('input[name="Country_multi[]"]').on("change", function () {
                            var valueArray = [];
                            $("input[name='Country_multi[]']:checked").each(function () {
                                valueArray.push($('label[for="' + this.id + '"]').text());
                            });
                            $("#Country").val(valueArray);
                            $("#CountryList").html(valueArray.join(", "));
                        });
                    },
                    error: function () {
                    },
                });
            }
            $('#ImageUrlUpdate').change(function () {
                // Checking whether FormData is available in browser
                if (window.FormData !== undefined) {
                    var _url = URL.createObjectURL(event.target.files[0]);
                    $('#viewImage').html('<img src=' + _url + ' class="img-responsive" style="max-width:200px" />');
                }
            });
            // Saved Image Gallery
            $(document).on('click', '.mce-filepicker', function () {
                if ($("label[for=" + $(this).attr("id") + "]").text() == "Source") {
                    _skip = 0;
                    $('#myModal').modal();
                    $('.loadmore').show();
                    $.ajax("/Home/GetSavedImages?skip=" + _skip).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
                }
            });
            $('#closeBtn').click(function () {
                $('#myModal').modal('hide');
            });
            $(document).on("click", ".load_MorePics", function () {
                $(this).remove();
                $('.loadmore').show();
                _skip = _skip + 20;
                $.ajax("/Home/GetSavedImages?skip=" + _skip + "&sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $(document).on('click', '.galleryImage', function () {
                var _imageUrl = $(this).attr("id");
                $('#myModal').modal('hide');
                $(document).find('.mce-filepicker .mce-textbox').val(_imageUrl);
            });
            // Double Click select text
            $(".inputText").dblclick(function (e) {
                var selectedText = window.getSelection();
                var _tags = $('#Tags').val();
                var newTag = _tags + ',' + selectedText;
                var tagarr = newTag.split(',');
                for (var i = 0; i < tagarr.length; i++) {
                    $('.tagsinput input').val(tagarr[i]);
                    $('.tagsinput input').blur().removeClass("not_valid");
                }
            });
            $('#selSector').change(function () {
                _sector = $('#selSector').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            $('#textBtn').click(function () {
                _title = $('#inputText').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            $("#inputText").keydown(function (e) {
                if (e.keyCode == 13) {
                    _title = $('#inputText').val();
                    $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
                }
            });
            $(document).on('change', '#inputText', function () {
                _title = $(this).val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            // Image From Gallery
            var _skipCount = 0;
            $('#selFromGallery').click(function () {
                _skipCount = 0;
                $('#newModal').modal();
                $('.loadmore').show();
                $.ajax("/Home/GetSavedImages?skip=" + _skipCount).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $('#cancelBtn').click(function () {
                $('#newModal').modal('hide');
            });
            $(document).on("click", ".load-more", function () {
                $(this).remove();
                $('.loadmore').show();
                _skipCount = _skipCount + 20;
                $.ajax("/Home/GetSavedImages?skip=" + _skipCount + "&sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $(document).on('click', '.selectedImage', function () {
                var _iurl = $(this).attr("id");
                var _ititle = $(this).attr("tabindex");
                $('#newModal').modal('hide');
                $('#ChooseImage').val(_iurl);
                $('#viewImage').html('<img src=' + _iurl + ' class="img-responsive" style="max-width:200px" />');
            });
            $('#selSec').change(function () {
                _sector = $('#selSec').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
            $('#searchClick').click(function () {
                _title = $('#textInput').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
            $("#textInput").keydown(function (e) {
                if (e.keyCode == 13) {
                    _title = $('#textInput').val();
                    $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
                }
            });
            $(document).on('change', '#textInput', function () {
                _title = $(this).val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
        });
    </script>
}