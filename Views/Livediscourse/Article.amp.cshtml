@model Devdiscourse.Models.BasicModels.Livediscourse
@using Devdiscourse.Models;
@using System.Text.RegularExpressions;
@using System.Globalization;
@using System.Threading;
@using Microsoft.AspNetCore.Html
@using System.Text
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@{
    Layout = "~/Views/Shared/_ampLayout.cshtml";
    ViewBag.Title = @Model.Title;
    string domainUrl = "https://www.devdiscourse.com";
    ViewBag.webEdition = ViewBag.region;
    string imageUrl = @Model.ImageUrl ?? "";
    var newsImage = imageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? domainUrl + "/remote.axd?" + imageUrl + "?width=1280" : string.Concat(domainUrl, imageUrl) + "?width=1280";
    ViewBag.PageImage = newsImage;
    string pageUrl = "/live-discourse/" + Model.GenerateSecondSlug();
    ViewBag.pageUrl = pageUrl;
    ViewBag.pageType = "article";
    var bodykeywords = @Model.Tags;
    ViewBag.PostUrl = string.Concat(domainUrl, @pageUrl);
    var dataTags = (@Model.Tags ?? "").Split(',').Where(s => s != "").Select(b => b.Trim()).Distinct(StringComparer.OrdinalIgnoreCase).Take(10);
    var keywords = String.Join(", ", dataTags);
    ViewBag.pageKeywords = "Live Blog, " + keywords;
    // string modifiedDescription = @Model.Title.Trim() + " " + GetFirstParagraph( GetCleanDescription(@Model.Description).ToHtmlString());
    // string modifiedDescription = @Model.Title.Trim() + " " + @GetFirstParagraph(new HtmlString(await GetCleanDescription(@Model.Description)).ToString());
    // ViewBag.PageDescription = @modifiedDescription;

    ViewBag.alternateHeadline = Model.Title.Trim();
    // string imgwidth = Request.Browser.IsMobileDevice ? "?width=480" : "?width=920";
    string imgWidth = HttpContextAccessor.HttpContext?.Request.Headers["User-Agent"].ToString().Contains("Mobi") == true ? "?width=480" : "?width=920";

    var regex = new Regex(@"twitter\.com\/.*\/status(?:es)?\/([^\/\?]+)", RegexOptions.IgnoreCase);
    string DataDesc = Regex.Replace(Model.Description, "style[^>]*", "");
    DataDesc = Regex.Replace(DataDesc, "<img", "<amp-img layout='responsive'");
    DataDesc = Regex.Replace(DataDesc, "<iframe", "<amp-iframe layout='responsive' sandbox=\"allow-scripts allow-same-origin\"");
    DataDesc = Regex.Replace(DataDesc, "width=\"100%\"", "width=\"300\"");
    DataDesc = Regex.Replace(DataDesc, "height=\"480\"", "height=\"200\"");
    CultureInfo cultureInfo = Thread.CurrentThread.CurrentCulture;
    TextInfo textInfo = cultureInfo.TextInfo;

    string hash = "%23post_";
    string ist = "(IST)";
    var postCount = 0;
    var pageAuthor = Model.Creator == "3df123f7-0a8f-43c1-967d-bc26c4463b56" ? "J.P. Singh" : @Model.ApplicationUsers?.FirstName + " " + Model.ApplicationUsers?.LastName;
    ViewBag.pageAuthor = pageAuthor;
    string authorName = "";
    TimeZoneInfo INDIAN_ZONE = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
    DateTime createdDate = TimeZoneInfo.ConvertTimeFromUtc(Model.CreatedOn, INDIAN_ZONE);
    DateTime publishedDate = TimeZoneInfo.ConvertTimeFromUtc(Model.PublishedOn, INDIAN_ZONE);
    DateTime modifiedDate = TimeZoneInfo.ConvertTimeFromUtc(Model.ModifiedOn, INDIAN_ZONE);
    var userAgent = HttpContextAccessor.HttpContext?.Request.Headers["User-Agent"].ToString();
    bool isCrawler = userAgent.Contains("bot") || userAgent.Contains("crawler");
}
@if (@Model.Creator == "3df123f7-0a8f-43c1-967d-bc26c4463b56")
{
    authorName = "J.P. Singh";
}
else
{
    authorName = @Model.ApplicationUsers?.FirstName + " " + Model.ApplicationUsers?.LastName;

}
@{
    List<string> idList = new List<string>();
    try
    {
        Match m;

        m = regex.Match(DataDesc);
        while (m.Success)
        {
            idList.Add(m.Groups[1].Value);
            m = m.NextMatch();
        }
    }
    catch (Exception e)
    {

    }
    int count = 0;
    var IdArray = idList.ToArray();
    DataDesc = DataDesc.Replace("&nbsp;", " ");
    DataDesc = DataDesc.Replace("&rsquo;", "'");
    DataDesc = DataDesc.Replace("&lsquo;", "'");
    DataDesc = DataDesc.Replace("&rdquo;", "\"");
    DataDesc = DataDesc.Replace("&ldquo;", "\"");
    if (IdArray.Any())
    {
        DataDesc = Regex.Replace(DataDesc, "<blockquote(.|\n)*?</blockquote>", m => "<amp-twitter width=\"375\" height=\"472\" layout=\"responsive\" data-tweetid=\"" + IdArray[count++] + "\"></amp-twitter>");
    }

}
@functions {
    async Task GetFirstParagraph(string htmltext)
    {
        await Task.Yield();
        Match m = Regex.Match(htmltext, @"<p>\s*(.+?)\s*</p>");
        if (m.Success)
        {
            @m.Groups[1].Value
            ;
        }
        else
        {
            @htmltext
            ;
        }
    }
}
@functions {
    async Task Truncate(string input, int length)
    {
        await Task.Yield();
        if (string.IsNullOrEmpty(input))
        {
            <text> </text>
        }
        else if (input.Length <= length)
        {
            @input
        }
        else
        {
            @input.Substring(0, length)

            <text>..</text>
        }
    }
}
@functions {
    async Task GetDescriptionText(string htmltext)
    {
        await Task.Yield();
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\/{0,1}>";//matches: <br>,<br/>,<br />,<BR>,<BR/>,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = htmltext.Replace("&nbsp;", " ");
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);
        @text
    }
}
@functions {
    async Task<string> GetCleanDescription(string htmltext)
    {
        await Task.Yield();
        var sb = new StringBuilder();
        htmltext = htmltext.Replace("&nbsp;", " ");
        htmltext = htmltext.Replace("&rsquo;", "'");
        htmltext = htmltext.Replace("&lsquo;", "'");
        htmltext = htmltext.Replace("&#39;", "'");
        htmltext = htmltext.Replace("&rdquo;", "\"");
        htmltext = htmltext.Replace("&ldquo;", "\"");
        // return @Html.Raw(htmltext).ToString();
        var text = @Html.Raw(htmltext);
        sb.Append(text);
        return sb.ToString();
    }
}
@if (!string.IsNullOrEmpty(bodykeywords))
{
    var tagArray = bodykeywords.Split(',').ToList();
    foreach (var tag in tagArray.OrderBy(a => a.Length))
    {
        var replaceTag = tag.Replace("(", "");
        replaceTag = replaceTag.Replace(")", "");
        DataDesc = Regex.Replace(DataDesc, "\"" + replaceTag.Trim() + "\"", " <a href=\"/news?tag=" + replaceTag.Trim() + "\">\"" + replaceTag.Trim() + "\"</a> ");
        DataDesc = Regex.Replace(DataDesc, " " + replaceTag.Trim() + ", ", " <a href=\"/news?tag=" + replaceTag.Trim() + "\">" + replaceTag.Trim() + "</a>, ");
        DataDesc = Regex.Replace(DataDesc, " " + replaceTag.Trim() + " ", " <a href=\"/news?tag=" + replaceTag.Trim() + "\">" + replaceTag.Trim() + "</a> ");
    }
}

@section headerScripts {
    <script async custom-element="amp-live-list" src="https://cdn.ampproject.org/v0/amp-live-list-0.1.js"></script>
    <script async custom-element="amp-twitter" src="https://cdn.ampproject.org/v0/amp-twitter-0.1.js"></script>
    <script async custom-element="amp-iframe" src="https://cdn.ampproject.org/v0/amp-iframe-0.1.js"></script>
    <script async custom-element="amp-social-share" src="https://cdn.ampproject.org/v0/amp-social-share-0.1.js"></script>
    <script async custom-element="amp-analytics" src="https://cdn.ampproject.org/v0/amp-analytics-0.1.js"></script>
    <script async custom-element="amp-list" src="https://cdn.ampproject.org/v0/amp-list-0.1.js"></script>
    <script async custom-template="amp-mustache" src="https://cdn.ampproject.org/v0/amp-mustache-0.2.js"></script>
    <script async custom-element="amp-instagram" src="https://cdn.ampproject.org/v0/amp-instagram-0.1.js"></script>
    <script async custom-element="amp-youtube" src="https://cdn.ampproject.org/v0/amp-youtube-0.1.js"></script>
}
@section customCss {
    .subtitle{color: #383838; font-weight: 500}.breadcrumb { padding: 0; background-color: transparent; margin-bottom: 20px; list-style: none; border-radius: 4px; color:#808080; } .breadcrumb > li { display: inline-block; } .breadcrumb > li a { color: #337ab7; text-decoration:none; } .breadcrumb > li + li:before { content: "›"; padding: 0 5px; font-size: 16px; color: #4d4d4d; }#statcounter {width: 1px;height:1px;}.news-box .title{font-size:26px;line-height:34px;font-weight:400;margin:10px 0}.discourse{padding-top:20px;padding-bottom:5px;border-bottom:1px solid #cfcfcf}.discourse h4{font-size:20px;line-height:28px;font-weight:400;margin:5px 0 10px 0}.discourse .time{font-size:13px;color:#777}.meta{font-size:12px;line-height:15px;color:#666}amp-social-share{border:1px solid #222;border-radius:50%;background-size:auto}amp-social-share[type=twitter]{background-color:#fff;background-image:url(/AdminFiles/Logo/share-tw.svg)}amp-social-share[type=facebook]{background-color:#fff;background-image:url(/AdminFiles/Logo/share-fb.svg)}amp-social-share[type=gplus]{background-color:#fff;background-image:url(/AdminFiles/Logo/share-gplus.svg)}amp-social-share[type=linkedin]{background-color:#fff;background-image:url(/AdminFiles/Logo/share-ln.svg)}amp-social-share[type=whatsapp]{background-color:#fff;background-image:url(/AdminFiles/Logo/share-whatsapp.svg)}.share-btn-group{text-align:center;border-top:2px solid #d4d4d4;border-bottom:2px solid #d4d4d4;padding-top:5px;margin:10px 0;outline:0;font-family:sans-serif}.share-btn-group:active,.share-btn-group:focus{background-color:transparent;outline-color:transparent}.img-caption{margin:5px 0;color:#666}.description a{color:#337ab7;text-decoration:none}.ampstart-btn{background-color:#ff6a00;color:#fff}#amp-live-list-insert-blog{border-top:2px solid #ff7c00}.tag{display:inline-block;min-width:10px;padding:3px 7px;margin:5px;font-weight:400;text-align:center;text-decoration:none;border-radius:20px;border:1px solid #5c5a5a;color:#333;background-color:#fff;font-size:13px}.m-b-10{margin-bottom:10px}.discourse amp-img img{object-fit:contain}
}
<div itemtype="http://schema.org/LiveBlogPosting" itemscope="itemscope" id="@domainUrl@pageUrl">
    <div itemprop="publisher" itemscope itemtype="https://schema.org/Organization">
        <div itemprop="logo" itemscope itemtype="https://schema.org/ImageObject">
            <meta itemprop="url" content="https://www.devdiscourse.com/AdminFiles/Logo/devdiscourse_news.png">
            <meta itemprop="width" content="400">
            <meta itemprop="height" content="60">
        </div>
        <meta itemprop="name" content="Devdiscourse">
    </div>
    <meta itemprop="name" content="Devdiscourse"> <meta itemprop="headline" content="@Model.Title">
    <meta itemprop="coverageStartTime" content="@createdDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")">
    <meta itemprop="coverageEndTime" content="@createdDate.AddDays(15).ToString("yyyy-MM-ddTHH:mm:sszzzzz")">
    <meta itemprop="dateModified" content="@modifiedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")">
    <meta itemprop="url" content="@domainUrl@pageUrl"> <meta itemprop="description" content="
@{
       await GetFirstParagraph(new HtmlString(await GetCleanDescription(@Model.Description)).ToString());
}"> <meta itemprop="about" content="event"> <div class="bolg-content" id="bolgcontent">
        @foreach (var item in ViewBag.BlogUpdates)
        {
            var newsImageUrl = ""; DateTime updatePublishedDate = TimeZoneInfo.ConvertTimeFromUtc(Model.PublishedOn, INDIAN_ZONE); DateTime updateModifiedDate = TimeZoneInfo.ConvertTimeFromUtc(Model.ModifiedOn, INDIAN_ZONE);
            DateTime updateCreatedDate = TimeZoneInfo.ConvertTimeFromUtc(Model.CreatedOn, INDIAN_ZONE);
            if (!string.IsNullOrEmpty(@item.ImageUrl) && item.ImageUrl != "/images/sector/all_sectors.jpg")
            {
                newsImageUrl = item.ImageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? domainUrl + "/remote.axd?" + item.ImageUrl : string.Concat(domainUrl, item.ImageUrl);
            }
            else
            {
                newsImageUrl = newsImage;
            }
            <div itemtype="http://schema.org/BlogPosting" itemprop="liveBlogUpdate" itemscope="itemscope" data-type="text">
                <h2 itemprop="headline" content="@item.Title"></h2><div itemprop="articleBody" style="display:none">
                    <strong>
                        @updateCreatedDate.ToString("HH:mm")@if (int.Parse(@updateCreatedDate.ToString("HH")) < 12)
                        {
                            <text> AM</text>
                        }
                        else
                        {
                            <text> PM</text>
                        }
                    </strong>@GetDescriptionText(item.Description)
                </div>
                <time itemprop="datePublished" datetime="@updatePublishedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")"></time>
                <span itemscope="itemscope" itemprop="author" itemtype="https://schema.org/Person">
                    <meta content="https://www.devdiscourse.com/" itemprop="sameAs"> <meta content="Devdiscourse" itemprop="name">
                </span> <meta itemprop="dateModified" content="@updateModifiedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")">
                <span itemprop="image" itemscope="itemscope" itemtype="https://schema.org/ImageObject">
                    <meta itemprop="url" content="@newsImageUrl"> <meta itemprop="width" content="1280">
                    <meta itemprop="height" content="720">
                </span>
                <span itemprop="publisher" itemscope="itemscope" itemtype="https://schema.org/Organization">
                    <span itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject">
                        <meta itemprop="url" content="https://www.devdiscourse.com/AdminFiles/Logo/ic_logo_amp.png">
                    </span> <meta itemprop="name" content="Devdiscourse">
                </span>
                <meta itemprop="mainEntityOfPage" content="@domainUrl@pageUrl">
                <time itemprop="url" content="@domainUrl@pageUrl#post_@item.Id">

                </time>
            </div>
        }
    </div>
</div>
<div class="news-box">
    <ul class="breadcrumb breadcrumb_new" itemscope="" itemtype="http://schema.org/BreadcrumbList"> <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"> <a href="/" target="_top" itemprop="item"><span itemprop="name">Home</span></a> <meta itemprop="position" content="1"> </li><li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"> <a href="/live-discourse" target="_top" itemprop="item"><span itemprop="name">Live Discourse</span></a> <meta itemprop="position" content="2"> </li><li class="active">Article</li></ul>
    <h1 class="title">@Model.Title</h1>
    @foreach (var firstUpdate in ViewBag.FirstBlogUpdates)
    {
        <h3 class="subtitle">@firstUpdate.Title</h3>
    }
    @{
        string country = ""; if (!string.IsNullOrEmpty(@Model.Country)) { country = "| " + Model.Country.Replace(",", ", "); }
    }
    <div class="meta">
        @Model.Author |
        Updated: @modifiedDate.ToString("dd-MM-yyyy HH:mm") IST |
        Created: @publishedDate.ToClientTime().ToString("dd-MM-yyyy HH:mm") IST
    </div>
    <div class="share-btn-group">
        <amp-social-share type="twitter" class="share-btn" width="32" height="32" aria-label="Share on twitter"></amp-social-share>
        <amp-social-share type="facebook" width="32" height="32" data-param-app_id="1962446954071172" data-attribution="1962446954071172" aria-label="Share on facebook"></amp-social-share>
        <amp-social-share type="linkedin" width="32" height="32" aria-label="Share on linkedin"></amp-social-share>
        <amp-social-share type="whatsapp" width="32" height="32" aria-label="Share on whatsapp"></amp-social-share>
    </div>
    @if (!string.IsNullOrEmpty(Model.ImageUrl) && Model.ImageUrl != "/images/defaultImage.jpg" && Model.ImageUrl != "/images/newstheme.jpg" && Model.ImageUrl != "/images/sector/all_sectors.jpg")
    {
        var newsImageUrl = Model.ImageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? Model.ImageUrl : Model.ImageUrl;
        <amp-img class="full-bottom" src="@domainUrl@newsImageUrl?width=1280" alt="@Model.Title" layout="responsive" width="1280" height="720"></amp-img>
        <p class="img-caption">
            <small>@Model.ImageCopyright</small>
        </p>
    }
    <div class="description">@Html.Raw(DataDesc)</div>@if (Model.Id == 105679)
    {
        <amp-instagram data-shortcode="BmNVEkSAx6a" data-captioned width="400" height="400" layout="responsive"> </amp-instagram>
    }

    <amp-live-list layout="container" data-poll-interval="15000" data-max-items-per-page="10" id="amp-live-list-insert-blog">
        <button update on="tap:amp-live-list-insert-blog.update" class="ampstart-btn ml1 caps"> You have updates </button>
        <div items>
            @{

                await Component.InvokeAsync("Livediscourseamp", new { id = Model.Id });

            }
        </div>
    </amp-live-list>


    @if (!string.IsNullOrEmpty(Model.Tags) && !isCrawler)
    {
        <div class="m-b-10">
            <h3 class="page-title">READ MORE ON</h3>
            @{
                var tag = Model.Tags.Split(',').Where(s => s != "").Select(b => b.Trim()).Distinct(StringComparer.OrdinalIgnoreCase); foreach (var t in tag.OrderBy(x => Guid.NewGuid()).Take(20))
                {
                    if (!string.IsNullOrEmpty(t.Trim()))
                    {
                        <a href="/news?tag=@t" class="tag">@t</a>
                    }
                }
            }
        </div>
    }
</div>
<amp-analytics type="gtag" data-credentials="include">
    <script type="application/json">
        {"vars" : {
        "gtag_id": "UA-123167123-1",
        "config" : {
        "UA-123167123-1": { "groups": "default"} }}}
    </script>
</amp-analytics>
<div id="statcounter">
    <amp-pixel src="https://c.statcounter.com/11890858/0/f7953c93/1/?nocache=RANDOM">
    </amp-pixel>
</div>
@{
    string updateTitle = "";
    string updateBody = "";
    foreach (var firstupdate in ViewBag.FirstBlogUpdates)
    {
        updateTitle = firstupdate.Title;
        publishedDate = TimeZoneInfo.ConvertTimeFromUtc(firstupdate.CreatedOn, INDIAN_ZONE);
        updateBody = GetDescriptionText(firstupdate.Description).ToString();
    }
}
<script type="application/ld+json">
        {
        "@@context":"http://schema.org",
        "@@type":"NewsArticle",
        "mainEntityOfPage": {
        "@@type": "WebPage",
        "@@id": "@domainUrl@pageUrl"
        },
        "headline":"@Model.Title",   @if (ViewBag.hasUpdates == true)
    {
        <text>"alternativeHeadline":"@updateTitle","articleBody":"@updateBody",</text>
    }
    else
    {
        <text>"articleBody":"@{
                await GetDescriptionText(Model.Description);
            }",</text>
    }
        "keywords":["@keywords"],
        "url":"@domainUrl@pageUrl",
        "description":"@{
        await GetFirstParagraph(new HtmlString(await GetCleanDescription(@Model.Description)).ToString());
    }",
        "datePublished":"@publishedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")",
        "dateModified":"@modifiedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")",
        "author":{
        "@@type":"Person",
        "name":"@authorName"
        },
        "publisher":{
        "@@type":"Organization",
        "name":"Devdiscourse",
        "url": "https://www.Devdiscourse.com",
        "logo":{
        "@@type":"ImageObject",
        "url":"https://www.devdiscourse.com/AdminFiles/Logo/devdiscourse_news.png",
        "width":600,
        "height":60
        }
        },
        "image":{
        "@@type":"ImageObject",
        "url":"@newsImage?width=1280",
        "height":900,
        "width":1200
        }
        }
</script>