@model Devdiscourse.Models.BasicModels.Event

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout _plain.cshtml";
}
<style>
    .actionButtons {
        display: none;
    }

    #Region_multi_actionButtons {
        display: block !important;
    }

    .checklist {
        height: unset !important;
    }

    #Country_multi_checklist {
        height: 400px !important;
    }
</style>
<link href="~/Content/jquery.datetimepicker.min.css" rel="stylesheet" />
<link href="~/Content/admin.css" rel="stylesheet" />
<div class="bg-white p-20">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")">Admin</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Events")">Events</a></li>
        <li class="breadcrumb-item active">Create</li>
    </ol>
    @using (Html.BeginForm("Create", "Events", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-lg-8 col-md-8 col-sm-6 col-xs-12">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control inputText" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SubTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.SubTitle, new { htmlAttributes = new { @class = "form-control inputText" } })
                            @Html.ValidationMessageFor(model => model.SubTitle, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            <div id="wordCount">[ Words entered: 0 ]</div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.FileUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.FileUrl, new { htmlAttributes = new { @class = "form-control", type = "file" } })
                            @Html.ValidationMessageFor(model => model.FileUrl, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Source, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Source, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control input-tags" } })
                            @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control datetimepicker" } })
                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control datetimepicker" } })
                            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Sector, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div id="SectorList" class="showListDiv"></div>
                        <input type="text" class="form-control hidden" id="Sector" name="Sector" />
                        @Html.DropDownList("Sector", null, htmlAttributes: new { @class = "form-control", id = "Sector_multi", @multiple = "multiple" })
                        @Html.ValidationMessageFor(model => model.Sector, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @*<div class="form-group">
            @Html.LabelFor(model => model.Themes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
            <input type="text" class="form-control hidden" id="Themes" name="Themes" />
            @Html.DropDownList("Themes", null, htmlAttributes: new { @class = "form-control", id = "Themes_multi", @multiple = "multiple" })
            @Html.ValidationMessageFor(model => model.Themes, "", new { @class = "text-danger" })
            </div>
            </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div id="RegionList" class="showListDiv"></div>
                        <input type="text" class="form-control hidden" id="Region" name="Region" />
                        @Html.DropDownList("Region", null, htmlAttributes: new { @class = "form-control", id = "Region_multi", @multiple = "multiple" })
                        @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-lg-2 col-md-2 col-sm-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        <div id="CategoryList" class="showListDiv"></div>
                        <input type="text" class="form-control hidden" id="Category" name="Category" />
                        @Html.DropDownList("Category", null, htmlAttributes: new { @class = "form-control", id = "Category_multi", @multiple = "multiple" })
                        @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        <div id="CountryList" class="showListDiv"></div>
                        <input type="text" class="form-control hidden" id="Country" name="Country" />
                        <select class="form-control" id="Country_multi" multiple="multiple" style="height:100px"></select>
                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" style="z-index:700000">
    <div class="modal-dialog" role="document">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <span class="pull-right fa fa-times cursor-pointer p-10" id="closeBtn"></span>
                <h3 class="no-margin">Image Gallery</h3>
            </div>
            <div class="modal-body m-b-20" style="overflow:auto; height:700px;">
                <div id="savedImages"></div>
                <div class="text-center loadmore f-16" style="display:none;"><span class="fa fa-circle-o-notch fa-spin fa-fw"></span>Loading</div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/Scripts/jquery.multiselect.js"></script>
    <script src="~/Scripts/tagsInput/js/jquery-tagsinput1.3.6jquery.tagsinput.min.js"></script>
    <script src="~/Scripts/jquery.datetimepicker.full.js"></script>
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script>
        $(document).ready(function () {
            var _region = "Global Edition";
            var _secList = "";
            var _skip = 0;

            $('.input-tags').tagsInput();
            tinymce.init({
                selector: '#Description',
                height: 300,
                menubar: false,
                relative_urls: false,
                remove_script_host: false,
                convert_urls: true,
                plugins: [
                    'advlist autolink lists link image charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen',
                    'insertdatetime media table contextmenu paste textcolor colorpicker wordcount imagetools'
                ],
                setup: function (ed) {
                    ed.on('init', function () {
                        this.getDoc().body.style.fontFamily = 'sans-serif';
                    });
                    ed.on('keyup', function (evt) {
                        var theEditor = tinymce.activeEditor;
                        var wordCount = theEditor.plugins.wordcount.getCount();
                        $("#wordCount").html("[ Words entered: " + wordCount + " ]");
                    });
                    ed.on('dblclick', function (evt) {
                        var selectedText = tinymce.activeEditor.selection.getContent({ format: 'text' });
                        var _tags = $('#Tags').val();
                        var newTag = _tags + ',' + selectedText;
                        var tagarr = newTag.split(',');
                        for (var i = 0; i < tagarr.length; i++) {
                            $('.tagsinput input').val(tagarr[i]);
                            $('.tagsinput input').blur().removeClass("not_valid");
                        }
                    });
                },
                toolbar: 'undo redo | styleselect | table charmap | forecolor backcolor | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | removeformat pastetext | code | print ',
                imagetools_cors_hosts: ['www.tinymce.com', 'http://localhost:61834']
            });
            // Datetime Jquery Calendar
            $('.datetimepicker').datetimepicker(function () {
                format: "MM/dd/yyyy hh:mm:ss";
            });

            // For Multiple Select
            $('#Sector_multi').multiselect();
            $('#Themes_multi').multiselect();
            $('#Region_multi').multiselect();
            $('#Category_multi').multiselect();
            // For Region
            $('input[name="Region_multi[]"]').on("change", function () {
                var valueArray = [];
                $("input[name='Region_multi[]']:checked").each(function () {
                    valueArray.push($('label[for="' + this.id + '"]').text());
                });
                $("#Region").val(valueArray);
                $("#RegionList").html(valueArray.join(", "));
                _region = valueArray.toString();
                if (_region == "") {
                    _region = "Global Edition";
                }
                getCountries();
            });
            getCountries();
            function getCountries() {
                $.ajax({
                    url: '/Home/GetCountry',
                    type: 'Post',
                    data: { region: _region },
                    dataType: 'Json',
                    success: function (data) {
                        $('#Country_multi').replaceWith(' <select class="form-control" id="Country_multi" multiple="multiple" style="height:100px"></select>');
                        $.each(data, function (i, item) {
                            $('#Country_multi').append('<option value="' + item.title + '">' + item.title + '</option>');
                        });
                        $('#Country_multi').multiselect('refresh');

                        $('input[name="Country_multi[]"]').on("change", function () {
                            var valueArray = [];
                            $("input[name='Country_multi[]']:checked").each(function () {
                                valueArray.push($('label[for="' + this.id + '"]').text());
                            });
                            $("#Country").val(valueArray);
                            $("#CountryList").html(valueArray.join(", "));
                        });
                    },
                    error: function () {
                    },
                });
            }
            // For Sector
            $('input[name="Sector_multi[]"]').on("change", function () {
                var valueArray = [];
                var textArray = [];
                $("input[name='Sector_multi[]']:checked").each(function () {
                    valueArray.push($(this).val().toString());
                    textArray.push($('label[for="' + this.id + '"]').text());
                });
                $("#Sector").val(valueArray);
                $("#SectorList").html(textArray.join(", "));
            });
            // For Themes
            $('input[name="Themes_multi[]"]').on("change", function () {
                var valueArray = [];
                $("input[name='Themes_multi[]']:checked").each(function () {
                    valueArray.push($(this).val().toString());
                });
                $("#Themes").html(valueArray.join(", "));
            });
            // For Category
            $('input[name="Category_multi[]"]').on("change", function () {
                var valueArray = [];
                var textArray = [];
                $("input[name='Category_multi[]']:checked").each(function () {
                    valueArray.push($(this).val().toString());
                    textArray.push($('label[for="' + this.id + '"]').text());
                });
                $("#Category").val(valueArray);
                $("#CategoryList").html(textArray.join(", "));
            });
            // Saved Image Gallery
            $(document).on('click', '.mce-filepicker', function () {
                if ($("label[for=" + $(this).attr("id") + "]").text() == "Source") {
                    _skip = 0;
                    _secList = $('#Sector').val();
                    $('#myModal').modal();
                    $('.loadmore').show();
                    $.ajax("/Home/GetSavedImages?sector=" + _secList + "&skip=" + _skip).done(function (data) { $('#savedImages').html("").append(data); $('.loadmore').hide(); });
                }
            });

            $('#closeBtn').click(function () {
                $('#myModal').modal('hide');
            });
            $(document).on("click", ".load_MorePics", function () {
                $(this).remove();
                $('.loadmore').show();
                _skip = _skip + 30;
                $.ajax("/Home/GetSavedImages?sector=" + _secList + "&skip=" + skip).done(function (data) { $('#savedImages').append(data); $('.loadmore').hide(); });
            });
            $(document).on('click', '.galleryImage', function () {
                var _imageUrl = $(this).attr("id");
                $('#myModal').modal('hide');
                $(document).find('.mce-filepicker .mce-textbox').val(_imageUrl);
            });
            // Double Click select text
            $(".inputText").dblclick(function (e) {
                var selectedText = window.getSelection();
                var _tags = $('#Tags').val();
                var newTag = _tags + ',' + selectedText;
                var tagarr = newTag.split(',');
                for (var i = 0; i < tagarr.length; i++) {
                    $('.tagsinput input').val(tagarr[i]);
                    $('.tagsinput input').blur().removeClass("not_valid");
                }
            });
        });
    </script>
}