@model Devdiscourse.Models.BasicModels.DevNews
@using System.Text.RegularExpressions;
@using System.Globalization;
@using System.Threading;
@using Devdiscourse.Hubs
@using Html2Amp;
@using Html2Amp.Sanitization;
@using Html2Amp.Sanitization.Implementation;
@using Devdiscourse.Hubs;
@using System.Xml
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@{
    Layout = "~/Views/Shared/_ampLayout.cshtml";
    string newsTitle = Model.Title.Trim();
    ViewBag.Title = newsTitle;
    //string domainUrl = "https://www.devdiscourse.com";
    string domainUrl = Url.Content("~");
    string pageTitle = newsTitle;
    ViewBag.webEdition = ViewBag.region;
    string imageUrl = @Model.ImageUrl ?? "";
    var newsFrameImage = imageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? domainUrl  + imageUrl + "?width=6&height=4&mode=crop&blur=90" : string.Concat(domainUrl, imageUrl) + "?width=6&height=4&mode=crop&blur=90";
    var newsImage = imageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? domainUrl  + imageUrl + "?width=1280" : string.Concat(domainUrl, imageUrl) + "?width=1280";
    ViewBag.PageImage = newsImage;
    string NewsLabel = Model.NewsLabels ?? "agency-wire";
    string pageUrl = "/article/" + NewsLabel + "/" + Model.GenerateSecondSlug();
    ViewBag.pageUrl = pageUrl;
    ViewBag.pageType = "article";
    ViewBag.pageAuthor = Model.Source;
    var bodykeywords = @Model.Tags;
    ViewBag.PostUrl = string.Concat(domainUrl, @pageUrl);
    var dataTags = (@Model.Tags ?? "").Split(',').Where(s => s != "").Select(b => b.Trim()).Distinct(StringComparer.OrdinalIgnoreCase).Take(10);
    var keywords = String.Join(", ", dataTags);
    ViewBag.pageKeywords = keywords;

    // string modifiedDescription = @newsTitle + " " + GetFirstParagraph(GetCleanDescription(@Model.Description).ToHtmlString());
    //string modifiedDescription = @newsTitle + " " + @GetFirstParagraph(new HtmlString(await GetCleanDescription(@Model.Description)).ToString());

    //var schemaDescription = !string.IsNullOrEmpty(Model.SubTitle) ? Model.SubTitle : @Truncate(modifiedDescription, 159).ToString();
    ViewBag.PageDescription = "Read more about " + @ViewBag.Title.Trim() + " on Devdiscourse.";
    ViewBag.alternateHeadline = newsTitle;
    string sourceCategory = "Agency-wire";

    // string imgwidth = Request.Browser.IsMobileDevice ? "?width=480" : "?width=920";
    string userAgent = Context.Request.Headers["User-Agent"].ToString();
    bool isMobileDevice = userAgent.Contains("Mobi", StringComparison.OrdinalIgnoreCase);
    string imgwidth = isMobileDevice ? "?width=480" : "?width=920";

    var schemaSource = string.IsNullOrEmpty(Model.NewsLabels) ? Model.Source : "Devdiscourse News Desk";
    var regex = new Regex(@"twitter\.com\/.*\/status(?:es)?\/([^\/\?]+)", RegexOptions.IgnoreCase);
    string ampDecs = @ViewBag.AmpDescriptoion;
    var DataDesc = @ViewBag.AmpDescriptoion;
    CultureInfo cultureInfo = Thread.CurrentThread.CurrentCulture;
    TextInfo textInfo = cultureInfo.TextInfo;
    string titlecase = !string.IsNullOrEmpty(Model.SourceUrl) ? textInfo.ToTitleCase(Model.SourceUrl.ToLower()) : "";
    var schemaType = Model.Type;
    var schemaAuthor = Model.Source;
    string hash = "%23post_";
    string ist = "(IST)";
    var postCount = 0;
    TimeZoneInfo INDIAN_ZONE = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
    DateTime createdDate = TimeZoneInfo.ConvertTimeFromUtc(Model.CreatedOn, INDIAN_ZONE);
    DateTime publishedDate = TimeZoneInfo.ConvertTimeFromUtc(Model.PublishedOn, INDIAN_ZONE);
    DateTime modifiedDate = TimeZoneInfo.ConvertTimeFromUtc(Model.ModifiedOn, INDIAN_ZONE);
    string objectfit = "contain";// Model.OriginalSource == "PR Newswire" ? "contain" : "cover";

}
@if (!string.IsNullOrEmpty(Model.SourceUrl))
{
    titlecase = titlecase == "Washington Dc" ? "| Washington DC" : textInfo.ToTitleCase("| " + Model.SourceUrl.ToLower());
}
@{
    List<string> idList = new List<string>();
    try
    {
        Match m;

        m = regex.Match(@ampDecs);
        while (m.Success)
        {
            idList.Add(m.Groups[1].Value);
            m = m.NextMatch();
        }
    }
    catch (Exception e)
    {

    }
    int count = 0;
    var IdArray = idList.ToArray();
    string datadescription = Model.Description ?? "";
    datadescription = datadescription.Replace("&nbsp;", " ");
    datadescription = datadescription.Replace("&rsquo;", "'");
    datadescription = datadescription.Replace("&lsquo;", "'");
    datadescription = datadescription.Replace("&rdquo;", "\"");
    datadescription = datadescription.Replace("&ldquo;", "\"");
    datadescription = datadescription.Replace("style=\"color: #ff6600;\"", "class=\"fg-orange\"");
    datadescription = datadescription.Replace("style=\"color: #0000ff;\"", "class=\"fg-blue\"");
    datadescription = datadescription.Replace("style=\"background-color: #ffff00;\"", "class=\"bg-yellow\"");
    datadescription = datadescription.Replace("style=\"background-color: #ffffff;\"", "class=\"bg-white\"");
    var converter = new HtmlToAmpConverter();
    converter.WithSanitizers(
        new HashSet<ISanitizer>
                                                                                                                                                        {
new InstagramSanitizer(),
new TwitterSanitizer(),
new AudioSanitizer(),
new HrefJavaScriptSanitizer(),
new ImageSanitizer(),
new JavaScriptRelatedAttributeSanitizer(),
new StyleAttributeSanitizer(),
new ScriptElementSanitizer(),
new TargetAttributeSanitizer(),
new XmlAttributeSanitizer(),
new YouTubeVideoSanitizer(),
new AmpIFrameSanitizer()
                                                                                                                                                        }); string ampHtml = converter.ConvertFromHtml(datadescription).AmpHtml;


}
@functions {
    async Task GetFirstParagraph(string htmltext)
    {
        Match m = Regex.Match(htmltext, @"<p>\s*(.+?)\s*</p>");
        if (m.Success)
        {
            @m.Groups[1].Value
            ;
        }
        else
        {
            @htmltext
            ;
        }
    }
}

@functions {
    async Task Truncate(string input, int length)
    {
        if (string.IsNullOrEmpty(input))
        {
            <text> </text>
        }
        else if (input.Length <= length)
        {
            @input
        }
        else
        {
            @input.Substring(0, length)

            <text>..</text>
        }
    }
}
@functions {
    async Task GetDescriptionText(string htmltext)
    {
        const string tagWhiteSpace = @"(>|$)(\W|\n|\r)+<";//matches one or more (white space or line breaks) between '>' and '<'
        const string stripFormatting = @"<[^>
    ]*(>|$)";//match any character between '<' and '>', even when end tag is missing
        const string lineBreak = @"<(br|BR)\s{0,1}\ /{0,1}>
        ";//matches: <br>,<br />,<br />,<BR>,<BR />,<BR />
        var lineBreakRegex = new Regex(lineBreak, RegexOptions.Multiline);
        var stripFormattingRegex = new Regex(stripFormatting, RegexOptions.Multiline);
        var tagWhiteSpaceRegex = new Regex(tagWhiteSpace, RegexOptions.Multiline);

        var text = htmltext.Replace("&nbsp;", " ");
        //Decode html specific characters
        text = System.Net.WebUtility.HtmlDecode(text);
        //Remove tag whitespace/line breaks
        text = tagWhiteSpaceRegex.Replace(text, "><");
        //Replace <br /> with line breaks
        text = lineBreakRegex.Replace(text, Environment.NewLine);
        //Strip formatting
        text = stripFormattingRegex.Replace(text, string.Empty);
        @text
        ;
    }
}
            @functions {
    async Task GetslugLabel(string text)
    {
        byte[] bytes = System.Text.Encoding.GetEncoding("Cyrillic").GetBytes(text);
        string str = System.Text.Encoding.ASCII.GetString(bytes).ToLower();
        str = Regex.Replace(str, @"[^a-z0-9\s-]", "");
        str = Regex.Replace(str, @"\s+", " ").Trim();
        str = str.Substring(0, str.Length <= 150 ? str.Length : 150).Trim();
        str = Regex.Replace(str, @"\s", "-"); // hyphens
        @str
        ;
    }
            }
            @functions {
    async Task FirstCharToUpper(string s)
    {
        if (string.IsNullOrEmpty(s))
        {
            var outData = "";
            @outData
        }
        var output = char.ToUpper(s[0]) + s.Substring(1);
        @output
    }
            }
            @functions {
    async Task<string> GetCleanDescription(string htmltext)
    {
        var sb = new StringBuilder();
        htmltext = htmltext.Replace("&nbsp;", " ");
        htmltext = htmltext.Replace("&rsquo;", "'");
        htmltext = htmltext.Replace("&lsquo;", "'");
        htmltext = htmltext.Replace("&#39;", "'");
        htmltext = htmltext.Replace("&rdquo;", "\"");
        htmltext = htmltext.Replace("&ldquo;", "\"");
        // var result = @Html.Raw(htmltext).ToString();
        // return result;
        var text = @Html.Raw(htmltext);
        sb.Append(text);
        return sb.ToString();
    }
        }
            @if (!string.IsNullOrEmpty(@Model.NewsLabels))
{
    sourceCategory = @Model.NewsLabels;
}
@if (!string.IsNullOrEmpty(bodykeywords))
{
    var tagArray = bodykeywords.Split(',').ToList();
    @*  foreach (var tag in tagArray.OrderBy(a => a.Length))
                {
                    var replaceTag = tag.Replace("(", "");
                    replaceTag = replaceTag.Replace(")", "");
                    datadescription = Regex.Replace(datadescription, "\"" + replaceTag.Trim() + "\"", " <a href=\"/news?tag=" + Url.Encode(replaceTag.Trim()) + "\">\"" + replaceTag.Trim() + "\"</a> ");
                    datadescription = Regex.Replace(datadescription, " " + replaceTag.Trim() + ", ", " <a href=\"/news?tag=" + Url.Encode(replaceTag.Trim()) + "\">" + replaceTag.Trim() + "</a>, ");
                    datadescription = Regex.Replace(datadescription, " " + replaceTag.Trim() + " ", " <a href=\"/news?tag=" + Url.Encode(replaceTag.Trim()) + "\">" + replaceTag.Trim() + "</a> ");
                } *@
    @foreach (var tag in tagArray.OrderBy(a => a.Length))
    {
        var replaceTag = tag.Replace("(", "").Replace(")", "").Trim();
        var encodedTag = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(replaceTag));

        // Replace occurrences with proper word boundaries
        datadescription = Regex.Replace(datadescription, $@"\b""{Regex.Escape(replaceTag)}""\b", $"<a href=\"/news?tag={encodedTag}\">{replaceTag}</a>");
        datadescription = Regex.Replace(datadescription, $@"\b{Regex.Escape(replaceTag)}\b,", $"<a href=\"/news?tag={encodedTag}\">{replaceTag}</a>,");
        datadescription = Regex.Replace(datadescription, $@"\b{Regex.Escape(replaceTag)}\b", $"<a href=\"/news?tag={encodedTag}\">{replaceTag}</a>");
    }
}
@if (Model.Type == "Blog" && !string.IsNullOrEmpty(Model.Author))
{
    schemaAuthor = Model.Author;
}
@if (Model.SubType == "Opinion")
{
    newsTitle = "Opinion: " + newsTitle;

}
@if (Model.Type == "LiveBlog")
{
    <script type="application/ld+json">
         {
         "@@context":"https://schema.org",
         "@@type":"LiveBlogPosting",
         "url":"@domainUrl@pageUrl",
         "coverageStartTime":"@Model.CreatedOn",
         "headline":"@Truncate(Model.Title, 100)",
        @*  "description":"@GetFirstParagraph(GetCleanDescription(Model.Description).ToHtmlString()).ToString()", *@
         "description":"@{ await GetFirstParagraph(new HtmlString(await GetCleanDescription(@Model.Description)).ToString());}",
         "image":{
         "@@context": "http://schema.org",
         "@@type": "ImageObject",
         "width": "100px",
         "height": "100px",
         "url":"@newsImage"
         },
         "datePublished":"@Model.PublishedOn",
         "dateModified":"@Model.ModifiedOn",
         "keywords":"@keywords",
         "publisher": {
         "@@type":"Organization",
         "name":"Devdiscourse",
         "logo": {
         "@@type": "ImageObject",
         "url": "https://www.devdiscourse.com/AdminFiles/Logo/ic_logo_amp.png",
         "width": "400px",
         "height": "60px"
         }},
         "author": {
         "@@type": "Organization",
         "sameAs": "https://www.devdiscourse.com",
         "name": "Devdiscourse"
         },
         "liveBlogUpdate":[@foreach (var item in @ViewBag.BlogUpdates)
        {
            postCount++;
            <text>
                                                                                         {
                 "@@type":"LiveBlogPosting",
                 "headline":"@item.ModifiedOn.ToLocalTime().ToString("hh:mm") @ist @Truncate(@item.Title, 65)",
                 "url":"@domainUrl@pageUrl#post_@item.Id",
                 "datePublished":"@item.CreatedOn.ToLocalTime().ToString("yyyy-MM-ddTHH:mm:ssK")",
                 "image": {
                 "@@context": "http://schema.org",
                 "@@type": "ImageObject",
                 "width": "400px",
                  "height": "60px",
                 "url": "https://www.devdiscourse.com/AdminFiles/Logo/ic_logo_amp.png"
                  },
                  "publisher": {
                  "@@type":"Organization",
                  "name":"Devdiscourse",
                   "logo": {
                   "@@type": "ImageObject",
                     "url": "https://www.devdiscourse.com/AdminFiles/Logo/ic_logo_amp.png",
                 "width": "400px",
                  "height": "60px"
                  }
                     },
                   "author": {
                     "@@type": "Organization",
                     "sameAs": "https://www.devdiscourse.com",
                  "name": "Devdiscourse"
                  },
                 "mainEntityOfPage":"@domainUrl@pageUrl",
             "dateModified":"@item.ModifiedOn.ToLocalTime().ToString("yyyy-MM-ddTHH:mm:ssK")",
              "articleBody":"@{ await GetDescriptionText(item.Description);}"
          }</text>
            if (postCount < ViewBag.BlogUpdatesCount)
            {
                <text>,</text>
            }
        }],
         "@@id":"@domainUrl@pageUrl"
         }
    </script>
}
else
{
    <script type="application/ld+json">
        {
        "@@context": "https://schema.org",
        "@@type": "NewsArticle",
        "mainEntityOfPage": {
        "@@type": "WebPage",
        "@@id": "@domainUrl@pageUrl"
        },
        "headline": "@newsTitle",
        "image": {
        "@@context": "http://schema.org",
        "@@type": "ImageObject",
        "width": "100px",
        "height": "100px",
        "url": "@newsImage"
        },
        "datePublished": "@publishedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")",
        "dateModified": "@modifiedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")",
        "author": {
        "@@type": "Person",
        "name": "@schemaAuthor"
        },
        "publisher": {
        "@@type": "Organization",
        "name": "Devdiscourse",
        "logo": {
        "@@type": "ImageObject",
        "url": "https://www.devdiscourse.com/AdminFiles/Logo/devdiscourse_news.png"
        }
        },
        "description": "@{ await GetFirstParagraph(@Model.Description);}",
        }
    </script>
}
@section headerScripts {
    @if (Model.Type == "LiveBlog")
    {
        <script async custom-element="amp-live-list" src="https://cdn.ampproject.org/v0/amp-live-list-0.1.js"></script>
    }
    <script async custom-element="amp-video" src="https://cdn.ampproject.org/v0/amp-video-0.1.js"></script>
    <script async custom-element="amp-twitter" src="https://cdn.ampproject.org/v0/amp-twitter-0.1.js"></script>
    <script async custom-element="amp-iframe" src="https://cdn.ampproject.org/v0/amp-iframe-0.1.js"></script>
    <script async custom-element="amp-social-share" src="https://cdn.ampproject.org/v0/amp-social-share-0.1.js"></script>
    <script async custom-element="amp-analytics" src="https://cdn.ampproject.org/v0/amp-analytics-0.1.js"></script>
    <script async custom-element="amp-list" src="https://cdn.ampproject.org/v0/amp-list-0.1.js"></script>
    <script async custom-template="amp-mustache" src="https://cdn.ampproject.org/v0/amp-mustache-0.2.js"></script>
    <script async custom-element="amp-instagram" src="https://cdn.ampproject.org/v0/amp-instagram-0.1.js"></script>
    <script async custom-element="amp-youtube" src="https://cdn.ampproject.org/v0/amp-youtube-0.1.js"></script>
    <script async custom-element="amp-facebook" src="https://cdn.ampproject.org/v0/amp-facebook-0.1.js"></script>
    <script async custom-element="amp-anim" src="https://cdn.ampproject.org/v0/amp-anim-0.1.js"></script>
    <script async custom-element="amp-carousel" src="https://cdn.ampproject.org/v0/amp-carousel-0.1.js"></script>
    <script async custom-element="amp-ad" src="https://cdn.ampproject.org/v0/amp-ad-0.1.js"></script>
    <script async custom-element="amp-fit-text" src="https://cdn.ampproject.org/v0/amp-fit-text-0.1.js"></script>
}
@section customCss {
                             body
                             {
                                 padding-bottom:43px;
                                 padding-top:54px}.fg-orange{color:#ff6a00}.bg-white{background-color:#fff} .description .fg-blue a,.description a.fg-blue,.fg-blue{color: #0000ff} .bg-yellow{background-color: #ffff00}.title-cont{height:100px}.font-title{font-weight:400;
                                     line-height:22px;
                                     font-size:15px;margin:0
                                 }
                                 .square-card
                                 {
                                     width:44%;
                                     display:inline-block;
                                     vertical-align:top;
                                     margin:5px 2%;
                                 }
                                         .author
                                         {
                                             font-size:12px
                                         }
                                         .gray-bg
                                         {
                                             border-radius:5px;
                                         padding:3px 10px 6px 10px;
                                         background-color:#f2f2f2
                                         }
                                         .sector
                                         {
                                             margin:0;padding:0;
                                         }
                                         .sector li
                                         {
                                             list-style:none;background-color:#474747;
                                             padding:2px 6px;
                                             display:inline-block;
                                             border-radius:3px;
                                             font-size:12px;
                                         }
                                         .sector li a
                                         {
                                             color:#fff;
                                             text-decoration:none
                                         }
                                         .upper-country{
                                             text-transform:uppercase;font-size:12px;
                                             font-weight:500;
                                             color:#666}.news-slide { width: 75%;
                                                 height: 100px;
                                                 border: 1px solid rgba(0, 0, 0, 0.04);
                                                 border-radius: 5px;
                                                 box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.04), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
                                             }
                                             .description strong,.description b
                                             {
                                                 font-weight:600}.img-avt {border-radius:50%;margin-right:5px;vertical-align: middle;
                                                 }
                                                 .breadcrumb
                                                 {
                                                     padding: 0;
                                                     background-color: transparent;
                                                     margin-bottom: 20px;
                                                     list-style: none;
                                                     border-radius: 4px; color:#808080;
                                                 }
                                                 .breadcrumb > li
                                                 {
                                                     display: inline-block;
                                                 }
                                                 .breadcrumb > li a
                                                 {
                                                     color: #337ab7;
                                                     text-decoration:none;
                                                 }
                                                 .breadcrumb > li + li:before
                                                 {
                                                     content: "›";
                                                     padding: 0 5px;
                                                     font-size: 16px;
                                                     color: #4d4d4d;
                                                 }
                                                 #statcounter
                                                 {
                                                     width: 1px;height:1px;
                                                 }
                                                 .blog img{
                                                     object-fit:cover
                                                 }
                                                 .full-bottom
                                                 {
                                                     background-image:url(@newsFrameImage);
                                                     background-size:cover
                                                 }
                                                 .full-bottom img
                                                 {
                                                     object-fit:@objectfit
                         }
                         .description a
                         {
                             color: #fd7e00;text-decoration: none;}.title{font-size:30px;line-height:36px;font-weight:500;margin:20px 0}.sub-title{font-size:18px;line-height:24px;font-weight:400;color:rgba(0, 0, 0, 0.54);margin:20px 0;}.source{font-size:13px;line-height:15px;margin:8px 0;color:#333}.meta{font-size:12px;line-height:15px;color:#666;margin-bottom:10px;}amp-social-share{border-radius:50%;vertical-align:bottom;outline:none}.share-text{line-height:32px;margin-right:10px;vertical-align:bottom} .description p,.description ul,.description ol{font-size:19px;line-height:1.58} .description table p,.description table td,.description table th{font-size:17px;margin-top:0;margin-bottom:5px;}.description table td,.description table th{padding:6px 10px}  .table,table { width: 100%; max-width: 100%; margin-bottom: 20px;border-collapse: collapse; border-spacing: 0; }table h3,table h4{margin:0} .table-bordered>tbody>tr>td, .table-bordered>tbody>tr>th, .table-bordered>tfoot>tr>td, .table-bordered>tfoot>tr>th, .table-bordered>thead>tr>td, .table-bordered>thead>tr>th { border: 1px solid #ddd;padding: 6px 10px}.share-btn-group{padding:5px 0;background-color:#fff;border-top:1px solid #eee;outline:none;font-family:sans-serif;position:fixed;bottom:0;width:100%}.share-btn-group:active,.share-btn-group:focus{background-color:#fff;outline-color:transparent}.img-caption{padding:3px 15px;color:#666;background-color: #ebebeb;margin:0;}.tag{display:inline-block;min-width:10px;padding:4px 13px 5px 13px;margin:5px;font-weight:400;text-align:center;text-decoration:none;border-radius:20px;color:#444444;background-color:#f7f7f7;font-size:14px}.latest-news-post{background-color:#f2f2f2;margin-top:8px;padding:8px 0;min-height:75px}.latest-news-post .country{background-color:#333;color:#fff; border-radius:3px; padding:0 5px 2px 5px;font-size:12px;}.m-b-10{margin-bottom:10px}.also-container{border-bottom:2px solid #e2e2e2;margin:20px 0}.ar-ul{padding-left:30px}.also-title{padding:4px 0 4px 25px;font-size:18px;position:relative;font-weight:400;line-height:23px}.also-title:after{content:"⬛ ";position:absolute;left:5px;font-size:9px;top:7px;}.single-news-post{padding-bottom:5px;margin-bottom:10px;border-bottom:1px solid #eaeaea}.single-news-post .title,.latest-news-post .title,.news-slide .title{font-weight:400;font-size:15px;margin:3px 0 0 0;line-height:22px}.single-news-post .country{color:#666;margin:0}.single-news-post .post-image,.single-news-post .post-content,.news-slide .post-image,.news-slide .post-content{display:table-cell;vertical-align:top}.single-news-post .post-image,.news-slide .post-image{padding-right:10px;}.image-rad{border-radius:5px;}.image-circle{border-radius:50%}.ad{margin:20px 0}.video-post .image{position:relative}.video-post .overlay{position:absolute;background-color:rgba(0,0,0,.7);top:0;width:100%;height:100%;text-align:center}.play-icon{background-color:#ff6a00;color:#fff;width:60px;padding:5px 0;text-align:center;margin:auto;margin-top:20%;font-size:22px}.more-btn{text-decoration:none;float:right;color:#222;background-color:#eee;padding:2px 10px;border-color:#999;border-width:2px 0;border-style:solid;margin-bottom:20px;margin-top:10px;clear:both;cursor:pointer}.divider{height:50px}.next-article{text-overflow:ellipsis;overflow:hidden;vertical-align:bottom;padding:4px 10px;background-color:#ff6a00;color:#fff;float:right}.description a{text-decoration:none}.live-blog{border-bottom:1px solid #eee}.highlight-containter { border: 1px solid #e6e6e6;background-color: #f3f3f3;margin-top:20px; }.highlight-containter h3{ margin:0; } .highlight-containter ul { font-weight: 500; color: #666; list-style: square; } .highlight-containter .top-line { width: 95%; height: 3px; margin-bottom: 20px; background-color: #ff6a00; }.highlight-containter .bottom-line { width:95%; margin-top:20px; height:3px; background-color:#ff6a00; }.p-20{padding:20px}.nextArticle{float:right}.advertisement-area{ background-color:#f1f1f1; text-align:center; padding:10px; border-radius:2px; } .advertisement-title { font-family: Arial, Helvetica, sans-serif; font-size: 11px; text-transform: uppercase; margin-bottom: 5px; color: #6d6d6d; }
}
@if (Model.NewsId == 1813875)
{
    <div class="advertisement-area"> <div class="advertisement-title">Advertisement</div><div class="p-10"> <a href="https://www.papasocial.com/instagram/likes?utm_source=devdiscourse&utm_medium=banner&utm_campaign=1813875&utm_term=buy+instagram+likes" title="buy instagram likes 1$"><amp-img src="https://uploads.papasocial.com/cdn/gallery/szbam1j77wbd0jft7dnl.png" width="1123" height="560" layout="responsive" alt="buy instagram likes"></amp-img></a> </div></div>
}
else if (Model.NewsId == 1837471)
{
    <div class="advertisement-area"> <div class="advertisement-title">Advertisement</div><div class="p-10"> <a href="https://www.tikroyal.com/tiktok-followers?utm_source=devdiscourse&utm_medium=banner&utm_campaign=1837471&utm_term=buy+tiktok+followers" title="buy tiktok followers"><amp-img src="https://uploads.tikroyal.com/cdn/gallery/xqdqn37oenjyyxbrs2yr.png" layout="responsive" width="1536" height="561" alt="buy tiktok followers"></amp-img></a> </div></div>
}
else
{
    <div class="advertisement-area"> <div class="advertisement-title">Advertisement</div><amp-embed width="320" height="50" type="doubleclick" data-slot="devdiscourse_320x50_AMP_HB" rtc-config='{"urls": ["https://pbs.nextmillmedia.com/openrtb2/amp?tag_id=11416"]}'> </amp-embed> @*<amp-ad width=320 height=100 type="doubleclick" data-slot="/42115163/IP_devdiscourse.com_320x100_Mobile_AMP_BTF"> </amp-ad>*@ </div>
}<div class="news-box">
    <h1 class="title">@Model.Title</h1> @if (!String.IsNullOrEmpty(Model.SubTitle))
    {
        <h2 class="sub-title">@Model.SubTitle</h2>
    }<ul class="sector">
        @{
            @await Component.InvokeAsync("Sector", new { sector = Model.Sector, filter = "NewsSector" });
        }
    </ul> @{
        string country = ""; if (!string.IsNullOrEmpty(@Model.Country)) { country = "| " + Model.Country.Replace(",", ", "); }
    }@if (!string.IsNullOrEmpty(Model.Author))
    {
        <p class="source">
            @if (@Model.Type != "Blog")
            {
                switch (Model.Source)
                {
                    case "PTI":
                        <a class="no-text-decoration" href="/pti-stories">@Model.Source.Trim()</a>
                        break;
                    case "Reuters":
                        <a class="no-text-decoration" href="/reuters-stories">@Model.Source.Trim()</a>
                        break;
                    case "IANS":
                        <a class="no-text-decoration" href="/ians-stories">@Model.Source.Trim()</a>
                        break;
                    case "Devdiscourse News Desk":
                        <a class="no-text-decoration" href="/devdiscourse-stories">@Model.Source.Trim()</a>
                        break;
                    case "ANI":
                        <a class="no-text-decoration" href="/ani-stories">@Model.Source.Trim()</a>
                        break;
                    case "PR Newswire":
                        <a class="no-text-decoration" href="/pr-newswire">@Model.Source.Trim()</a>
                        break;
                    case "": break;
                    case null: break;
                    default:
                        <a class="no-text-decoration" href="/news-source/@Model.Source.Trim()">@Model.Source.Trim()</a>
                        break;
                }
            }@if (@Model.Type == "Blog" || @Model.Type == "Editorial" || @Model.Type == "Column" || @Model.Type == "Opinion")
            {
                <a class="no-text-decoration" href="/Home/AuthorArticles?fl=@Model.Author.Trim()">
                    @if (!string.IsNullOrEmpty(Model.Themes))
                    {
                        var authorImage = Model.Themes.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? domainUrl + "/remote.axd?" + Model.Themes : string.Concat(domainUrl, Model.Themes);
                        <amp-img class="img-avt" layout="fixed" width="30" height="30" src="@authorImage?width=30&height=30&mode=crop" alt="@Model.Author.Trim()"> <amp-img alt="@Model.Author.Trim()" fallback width="30" height="30" src="/AdminFiles/Logo/img_avatar.png?width=30&height=30&mode=crop"></amp-img> </amp-img>
                    }
                    else
                    {
                        <amp-img class="img-avt" layout="fixed" width="30" height="30" src="@domainUrl/AdminFiles/Logo/img_avatar.png?width=30&height=30&mode=crop" alt="@Model.ApplicationUsers?.FirstName"> <amp-img alt="@Model.ApplicationUsers?.FirstName" fallback width="30" height="30" src="/AdminFiles/Logo/img_avatar.png?width=30&height=30&mode=crop"></amp-img> </amp-img>
                    }@Model.Author.Trim()
                </a>
            }@titlecase @country
        </p>
    }
    else
    {
        <p class="source">
            @switch (Model.Source)
            {
                case "PTI":
                    <a class="no-text-decoration" href="/pti-stories/">@Model.Source.Trim()</a>
                    break;
                case "Reuters":
                    <a class="no-text-decoration" href="/reuters-stories/">@Model.Source.Trim()</a>
                    break;
                case "IANS":
                    <a class="no-text-decoration" href="/ians-stories/">@Model.Source.Trim()</a>
                    break;
                case "Devdiscourse News Desk":
                    <a class="no-text-decoration" href="/devdiscourse-stories/">@Model.Source.Trim()</a>
                    break;
                case "ANI":
                    <a class="no-text-decoration" href="/ani-stories/">@Model.Source.Trim()</a>
                    break;
                case "PR Newswire":
                    <a class="no-text-decoration" href="/pr-newswire">@Model.Source.Trim()</a>
                    break;
                case "": break;
                case null: break;
                default:
                    <a class="no-text-decoration" href="/news-source/@Model.Source.Trim()">@Model.Source.Trim()</a>
                    break;
            }@titlecase @country
        </p>
    }<div class="meta"> Updated: @modifiedDate.ToString("dd-MM-yyyy HH:mm") IST | Created: @publishedDate.ToString("dd-MM-yyyy HH:mm") IST </div>
</div>
<div class="cont-container">
    @if (!string.IsNullOrEmpty(Model.ImageUrl) && Model.ImageUrl != "/images/defaultImage.jpg" && Model.ImageUrl != "/images/newstheme.jpg" && Model.ImageUrl != "/images/sector/all_sectors.jpg")
    {
        var newsImageUrl = Model.ImageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? Model.ImageUrl : Model.ImageUrl;
        if (Model.UserNewsFiles == null)
        {
            <amp-img class="full-bottom" src="@domainUrl@newsImageUrl?width=1280" alt="@Model.Title" layout="responsive" width="1280" height="720"></amp-img>

            <p class="img-caption">
                <small>
                    @Model.ImageCopyright
                </small>
            </p>
        }
        else
        {
            foreach (var item in Model.UserNewsFiles.Take(1))
             {
                    <script type="application/ld+json">
                        {
                        "@@context": "https://schema.org/", 
                        "@@type": "VideoObject", 
                        "name": "@newsTitle", 
                        "@@id": "@domainUrl@pageUrl", 
                        "datePublished": "@publishedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")",
                        "description" : @{ await  GetDescriptionText(@Model.Description);},
                        "thumbnailURL" : "@newsImage&height=518&mode=crop&anchor=center&format=jpeg", 
                        "thumbnail" : "@newsImage&height=518&mode=crop&anchor=center&format=jpeg", 
                        "contentUrl": "@item.FilePath", 
                        "uploadDate":"@publishedDate.ToString("yyyy-MM-ddTHH:mm:sszzzzz")", 
                        "author":{"@@type": "Person", "name": "Devdiscourse News Desk"}}

                    </script>
                <amp-video id="my-video" class="video-js center-block" controls width="640" height="360" layout="responsive" poster="@newsImage&height=518&mode=crop&anchor=center&format=jpeg">
                    <source src="/api/MediaStream/GetVideoContent/@item.Id" type="video/mp4" />
                    <div fallback> <p>This browser does not support the video element.</p></div>
                </amp-video>
              }

         }  
    }
</div>
<div class="news-box">
    <div class="description">
        @Html.Raw(ampHtml) @if ((Model.OriginalSource == "Reuters" || Model.OriginalSource == "PTI" || Model.OriginalSource == "IANS" || Model.OriginalSource == "ANI") && !datadescription.Contains("(This story has not been edited by Devdiscourse staff and is auto-generated from a syndicated feed.)") && (Model.Source ?? "").Trim() != "Devdiscourse News Desk")
        {
            <p>(This story has not been edited by Devdiscourse staff and is auto-generated from a syndicated feed.)</p>
        }
        else if ((Model.OriginalSource == "Reuters" || Model.OriginalSource == "PTI" || Model.OriginalSource == "IANS" || Model.OriginalSource == "ANI") && !datadescription.Contains("(This story has not been edited by Devdiscourse staff and is auto-generated from a syndicated feed.)") && (Model.Source ?? "").Trim() == "Devdiscourse News Desk")
        {
            <p>(With inputs from agencies.)</p>
        }@if (@Model.Type == "Blog" && !string.IsNullOrEmpty(@Model.Source))
        {
            <div class="ad"> <span class="left badge">FIRST PUBLISHED ON: </span> <span class="right">@Model.Source</span> </div>
        }
    </div>@if (Model.Type == "LiveBlog")
    {
        <amp-live-list layout="container" data-poll-interval="15000" data-max-items-per-page="10" id="amp-live-list-insert-blog">
            <button update on="tap:amp-live-list-insert-blog.update" class="ampstart-btn ml1 caps"> You have updates </button> <div items>
                @{
                    await Component.InvokeAsync("LiveBlogsamp", new { id = Model.NewsId });
                }
            </div>
        </amp-live-list>
    }@if (!string.IsNullOrEmpty(Model.Tags))
    {
        <div class="m-b-10">
            <h3 class="page-title">READ MORE ON</h3> @{
                var tag = Model.Tags.Split(',').Where(s => s != "").Select(b => b.Trim()).Distinct(StringComparer.OrdinalIgnoreCase); foreach (var t in tag.OrderBy(x => Guid.NewGuid()).Take(20))
                {
                    var replaceTag = Regex.Replace(tag.ToString(), "[()]", "").Trim();
                    if (!string.IsNullOrEmpty(t.Trim()))
                    {
                        @*                         <a href="/news?tag=@Url.Encode(@t)" class="tag">@t</a> *@
                        // var encodedTag = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(replaceTag));
                        string encodeUrl = System.Net.WebUtility.UrlEncode(t.Trim());
                        <a href="/news?tag=@encodeUrl" class="tag">@t</a>
                    }
                }
            }
        </div>
    }
</div>
<div class="advertisement-area">
    <div class="advertisement-title">Advertisement</div>
    <div class="text-center p-5">
        <amp-embed width="320" height="50" type="doubleclick" data-slot="devdiscourse_320x50_AMP_HB" rtc-config='{"urls": ["https://pbs.nextmillmedia.com/openrtb2/amp?tag_id=11416"]}'>
        </amp-embed> @*<amp-ad layout="responsive" width=300 height=250 type="adsense" data-ad-client="ca-pub-5016155138623826" data-ad-slot='TagC_300x250'> </amp-ad>*@
    </div>
</div>
<div class="news-box p-t-20">

    <div class="also-container">
        <h3 class="ar-title">READ MORE</h3>
        <amp-list src="/api/SearchApi/AmpRelatedNews/@Model.NewsId/@ViewBag.region/@Model.Sector" width="auto" height="280" class="blogList">
            <template type="amp-mustache">
                <div class="also-title">

                   @*  <a href="@domainUrl{{url}}?amp" title="{{@Model.Title}}" class="no-text-decoration v-a-m"> *@
                    <a href="{{url}}?amp" title="{{@Model.Title}}" class="no-text-decoration v-a-m">
                        {{title}}
                    </a>

                </div>
            </template>
        </amp-list>
    </div>
</div>
<div class="news-box">
    <amp-list src="/api/SearchApi/GetPreviousSectorAmpNews/@Model.NewsId/@Model.Sector/@ViewBag.region" width="auto" height="1500" class="">
        <template type="amp-mustache">
            <div>
                <div class="article-divider clearfix" data-articleurl="{{slug}}?amp" data-articletitle="{{title}}">
                    <span>Next Article</span>
                </div>
                <h2 class="title">{{title}}</h2>{{#subtitle}}
                <h3 class="sub-title">{{subtitle}}</h3>
                {{/subtitle}}{{#sector}}<ul class="sector">
                    <li>
                        <a href="/news/{{sectorSlug}}" target="_top">
                            <span class="text-capitalize">{{sector}}</span>
                        </a>
                    </li>
                </ul>{{/sector}}
                <p class="source">
                    {{#source}}<a class="no-text-decoration" href="{{SourceUrl}}">{{source}}</a>{{/source}}{{#isBlog}}
                    <a class="no-text-decoration" href="/Home/AuthorArticles?fl={{Themes}}">
                        <amp-img class="img-avt" layout="fixed" width="30" height="30" src="{{Avatar}}?width=30&height=30&mode=crop" alt="{{themes}}"> <amp-img alt="{{themes}}" fallback width="30" height="30" src="/AdminFiles/Logo/img_avatar.png?width=30&height=30&mode=crop"></amp-img> </amp-img>{{themes}}
                    </a>{{/isBlog}}{{#sourceUrl}}<span> |{{sourceUrl}}</span>{{/sourceUrl}}{{#country}}<span> |{{country}}</span>{{/country}}
                </p><div class="meta"> Updated:{{modifiedOnString}}IST | Created:{{publishedOnString}}IST </div><div class="cont-container"> <amp-img class="full-bottom" src="{{imageUrl}}?width=1280" alt="{{title}}" layout="responsive" width="1280" height="720"></amp-img> <p class="img-caption"> <small>{{imageCopyright}}</small> </p></div><div class="description">{{{description}}}{{#disclaimer}}<p>{{disclaimer}}</p>{{/disclaimer}}</div>{{#tags}}<div class="m-b-10"> <h3 class="page-title">READ MORE ON</h3>{{{tagArray}}}</div>{{/tags}}<amp-analytics type="googleanalytics" id="google_analytics"> <script type="application/json">{"vars":{"account": "UA-123167123-1"}, "triggers":{"track pageview":{"on": "visible", "request": "pageview", "vars":{"title": "{{title}}", "ampdocurl": "@domainUrl/article/{{label}}/{{slug}}?amp"}}}}</script> </amp-analytics> @*<div class="advertisement-area"> <div class="advertisement-title">Advertisement</div><amp-ad layout="responsive" width=300 height=250 type="adsense" data-ad-client="ca-pub-5016155138623826" data-ad-slot='TagC_300x250'> </amp-ad> </div>*@
            </div>
        </template>
    </amp-list>
</div>
<div class="news-box p-t-20">
    <h3 class="page-title">OPINION / BLOG</h3>
    <amp-list src="/api/SearchApi/GetAmpOpinion/@ViewBag.region" width="auto" height="500" class="blogList">
        <template type="amp-mustache">
         @*    <a href="@domainUrl{{url}}?amp" title="{{title}}" class="no-text-decoration"> *@
            <a href="{{url}}?amp" title="{{@Model.Title}}" class="no-text-decoration v-a-m">
                <div class="single-news-post">
                    <div class="post-image">
                        {{#authorImage}}
                        <amp-img src="https://www.devdiscourse.com{{authorImage}}?width=45&height=45&mode=crop" class="image-circle" layout="fixed" width="45" alt="{{Title}}" height="45">
                        </amp-img>
                        {{/authorImage}}{{^authorImage}}
                        <amp-img src="https://www.devdiscourse.com{{imageUrl}}?width=45&height=45&mode=crop" class="image-circle" layout="fixed" width="45" alt="{{Title}}" height="45">
                        </amp-img>
                        {{/authorImage}}
                    </div>
                    <div class="post-content">
                        <div class="gray-bg">
                            <span class="author font-oswald">{{author}}</span>
                            <h4 class="title">{{title}}</h4>

                        </div>
                    </div>
                </div>
            </a>
        </template>
    </amp-list>
</div>
<div class="news-box">
    @{
     
        await Component.InvokeAsync("AmpInterview");

    }
    <h3 class="page-title">LATEST NEWS</h3>
</div>
<div class="cont-container">
    <amp-list src="/api/SearchApi/GetAmpLatestNewsItems" width="auto" height="540" class="blogList">
        <template type="amp-mustache">
        
       @*      <a href="@domainUrl{{url}}?amp" title="{{title}}" class="no-text-decoration"> *@
            <a href="{{url}}?amp" title="{{@Model.Title}}" class="no-text-decoration v-a-m">
                <div class="latest-news-post">
                    <div class="news-box">
                        {{#country}}
                        <span class="country">
                            {{country}}

                        </span>
                        {{/country}}{{^country}}
                        <span class="country">
                            Global
                        </span>
                        {{/country}}
                        <h4 class="title">{{title}}</h4>
                    </div>
                </div>
            </a>

        </template>
    </amp-list>
</div>
<div class="news-box">

    @*<h4 class="page-title">TRENDING</h4>
    <amp-list src="@domainUrl/api/SearchApi/GetampTrends/@ViewBag.region" width="auto" height="485" class="blogList"> <template type="amp-mustache"> <a href="@domainUrl{{Url}}?amp" title="{{Title}}" class="no-text-decoration" target="_blank"> <div class="square-card">
    <amp-img src="{{ImageUrl}}?width=168&height=134&mode=crop" layout="responsive" width="168" alt="{{Title}}" height="134" class="image-rad"></amp-img> <div class="title-cont">
    <h4 class="font-title">{{Title}}</h4> </div></div></a>
    </template> </amp-list>*@


    <h4 class="page-title">VIDEOS</h4>
    <amp-list src="/api/SearchApi/GetAmpVideoNews/@ViewBag.region" width="auto" height="320" class="blogList">
        <template type="amp-mustache">
          @*   <a href="@domainUrl{{url}}?amp" title="{{title}}" class="no-text-decoration"> *@
            <a href="{{url}}?amp" title="{{@Model.Title}}" class="no-text-decoration v-a-m">
                <div class="video-post">
                    {{^defaultImage}}<div class="image">
                        <amp-img src="@domainUrl{{imageUrl}}?width=320&height=180&mode=crop" layout="responsive" width="640" alt="{{title}}" height="360"></amp-img>
                        <div class="overlay">
                            <div class="play-icon">
                                ►

                            </div>
                        </div>
                    </div>{{/defaultImage}}<div class="single-news-post">
                        <h4 class="title p-t-5">{{title}}</h4>
                    </div>
                </div>
            </a>
        </template>
    </amp-list>



    <div class="divider">
        <a href="/news/videos" class="more-btn">View All</a>
    </div>@*<div class="ad"> <a href="http://visionri.com" target="_blank"><amp-img src="/AdminFiles/Ads/Banner/digital_development_mobile.jpg" width="320" height="50" layout="responsive"></amp-img></a> </div>*@
    <amp-embed width="320" height="50" type="doubleclick" data-slot="devdiscourse_320x50_stickybottom_amp_HB" rtc-config='{"urls": ["https://pbs.nextmillmedia.com/openrtb2/amp?tag_id=8096"]}'>
    </amp-embed>
</div>
<div class="share-btn-group">
    <div class="news-box">
        <amp-social-share type="twitter" width="32" height="32" aria-label="Share on twitter"></amp-social-share>
        <amp-social-share type="facebook" width="32" height="32" data-param-app_id="1962446954071172" data-attribution="1962446954071172" aria-label="Share on facebook">

        </amp-social-share>
        <amp-social-share type="linkedin" width="32" height="32" aria-label="Share on linkedin"></amp-social-share> <amp-social-share type="whatsapp" width="32" height="32" aria-label="Share on whatsapp">

        </amp-social-share>
    </div>
</div>
<amp-analytics type="googleanalytics" id="google_analytics">
    <script type="application/json">
        {"vars":{"account": "UA-123167123-1"}, "triggers":{"track pageview":{"on": "visible", "request": "pageview", "vars":{"title": "@pageTitle", "ampdocurl": "@domainUrl@pageUrl"}}}}
    </script>
</amp-analytics><amp-analytics type="alexametrics">
    <script type="application/json">
        {"vars":{"atrk_acct": "VE/Iq19jYF20V1", "domain": "devdiscourse.com"}}
    </script>
</amp-analytics>
