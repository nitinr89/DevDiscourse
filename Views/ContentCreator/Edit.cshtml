@model Devdiscourse.Models.ContributorModels.Content
@{
    ViewBag.Title = "Contribute - Devdiscourse";
    string domainUrl = "https://www.devdiscourse.com";
    string imageUrl = "/AdminFiles/Logo/devediscourse_banner.png";
    ViewBag.PageDescription = "Devdiscourse is World's leading website for International Development News. Get Breaking News on Politics, Business, Technology, Science, Health, Education and Entertainment.";
    ViewBag.webEdition = ViewBag.edition;
    ViewBag.PostUrl = "https://www.devdiscourse.com/contribute";
    ViewBag.pageKeywords = "Development news, Current news, live news, international news in english, latest top news, India news, Africa news, daily news, world news, latest news today, online news, sports news, politics news, health news, science news, technology news, energy news, urban development news, transport news, economy news, finance news, sports news, art and culture news, education news, sports news, Agro-Forestry, social gender, Public Administration, Water and Sanitation";
    var newsImage = imageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? imageUrl : string.Concat(domainUrl, imageUrl);
    ViewBag.PageImage = newsImage;
}
<link href="~/Content/jquery.multiselect.css" rel="stylesheet" />
<link href="~/Content/admin.css" rel="stylesheet" />
<link href="~/Scripts/tagsInput/css/jquery.tagsinput.min.css" rel="stylesheet" />
<link href="~/Content/contribute.css" rel="stylesheet" />
<div class="container p-b-20">
    <div class="left-panel">
        <div class="icon-cont bg-primary">
            <a href="@Url.Action("Create", "ContentCreator")">
                <img src="~/images/contibutor/plus_white.svg" class="icon" />
                <div class="fg-white text-center">Create</div>
            </a>
        </div>
        <div class="icon-cont bg-white m-t-10">
            <a href="@Url.Action("Index", "ContentCreator")">
                <img src="~/images/contibutor/dashboard_line.svg" class="icon" />
                <div class="text-center">Dashboard</div>
            </a>
        </div>
        <div class="icon-cont bg-white">
            <a href="@Url.Action("Drafted", "ContentCreator")">
                <img src="~/images/contibutor/draft_line.svg" class="icon" />
                <div class="text-center">Draft</div>
            </a>
        </div>
        <div class="icon-cont bg-white">
            <a href="@Url.Action("Pending", "ContentCreator")">
                <img src="~/images/contibutor/pending_line.svg" class="icon" />
                <div class="text-center">Pending Review</div>
            </a>
        </div>
        <div class="icon-cont bg-white">
            <a href="@Url.Action("Published", "ContentCreator")">
                <img src="~/images/contibutor/publish_line.svg" class="icon" />
                <div class="text-center">Published</div>
            </a>
        </div>
        <div class="icon-cont bg-white">
            <a href="@Url.Action("Rejected", "ContentCreator")">
                <img src="~/images/contibutor/cannot_line.svg" class="icon" />
                <div class="text-center">Cannot Publish</div>
            </a>
        </div>
        <div class="icon-cont bg-white m-t-10" id="keyInst" style="cursor:pointer">
            <img src="~/images/contibutor/key_instr_line.svg" id="instruction" class="icon" />
            <div class="text-center">
                Key Instructions
            </div>
        </div>
        <div class="icon-cont bg-white m-t-10">
            <a href="@Url.Action("Earnings", "ContentCreator")">
                <img src="~/images/contibutor/earnings.svg" class="icon" />
                <div class="text-center">Earnings</div>
            </a>
        </div>
        <div class="icon-cont bg-white">
            <a href="@Url.Action("Settings", "ContentCreator")">
                <img src="~/images/contibutor/setting.svg" class="icon" />
                <div class="text-center">Payment Settings</div>
            </a>
        </div>
        <div class="icon-cont bg-white">
            <a href="@Url.Action("History", "ContentCreator")">
                <img src="~/images/contibutor/history.svg" class="icon" />
                <div class="text-center">Payment History</div>
            </a>
        </div>
    </div>
    <div class="main">
        <div class="bg-white p-10">
            <h3 class="title no-margin">Create</h3>
            @using (Html.BeginForm("Edit", "ContentCreator", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal p-20">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                        <div class="">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control inputText" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            <div id="title_character"></div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SubTitle, htmlAttributes: new { @class = "control-label" })
                        <div class="">
                            @Html.EditorFor(model => model.SubTitle, new { htmlAttributes = new { @class = "form-control inputText" } })
                            @Html.ValidationMessageFor(model => model.SubTitle, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                        <div class="">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", style = "height:120px;" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            <div id="wordCount">[ Words entered: 0 ]</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 col-xs-12">
                            <div class="form-group p-5">
                                @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label" })
                                <div class="">
                                    <div id="RegionList" class="showListDiv"></div>
                                    <input type="text" class="form-control hidden" id="Region" name="Region" />
                                    @Html.DropDownList("Region", null, htmlAttributes: new { @class = "form-control", id = "Region_multi", @multiple = "multiple" })
                                    @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 col-xs-12">
                            <div class="form-group p-5">
                                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label" })
                                <div class="">
                                    <div id="CountryList" class="showListDiv"></div>
                                    <input type="text" class="form-control hidden" id="Country" name="Country" />
                                    <select class="form-control" id="Country_multi" multiple="multiple" style="height:100px"></select>
                                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 col-xs-12">
                            <div class="form-group  p-5">
                                @Html.LabelFor(model => model.NewsLabels, htmlAttributes: new { @class = "control-label" })
                                <div class="">
                                    @Html.DropDownList("NewsLabels", null, "Select", htmlAttributes: new { @class = "form-control", @size = "23" })
                                    @Html.ValidationMessageFor(model => model.NewsLabels, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                        <div class="">
                            <select class="form-control" id="Type" name="Type">
                                <option value="News">News</option>
                                <option value="Blog">Blog</option>
                                <option value="Analysis">Analysis</option>
                                <option value="Opinion">Opinion</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Source, htmlAttributes: new { @class = "control-label" })
                        <div class="">
                            @Html.EditorFor(model => model.Source, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-4 p-b-10">
                                @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label" })
                                @* <img src="~/Content/transparent.png" data-src="/remote.axd?@Model.ImageUrl?width=240&height=180&mode=crop" style="max-width:240px;" class="img-responsive lazy" /> *@
                                <img src="@Model.ImageUrl?width=240&height=180&mode=crop" style="max-width:240px;" class="img-responsive lazy" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                @Html.HiddenFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control" } })
                                <input type="file" class="form-control" id="ImageUrlUpdate" name="ImageUrlUpdate" />
                                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-2 text-center" style="padding-top:5px">
                                <strong>OR</strong>
                            </div>
                            <div class="col-md-4">
                                <input type="button" class="btn btn-blue" value="Choose image from gallery" id="selFromGallery" />
                                <input type="text" class="form-control hidden" id="ChooseImage" name="ChooseImage" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ImageCopyright, htmlAttributes: new { @class = "control-label" })
                        <div class="">
                            @Html.EditorFor(model => model.ImageCopyright, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ImageCopyright, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.VideoUrl, htmlAttributes: new { @class = "control-label" })
                            </div>
                            @if (!String.IsNullOrEmpty(Model.VideoUrl))
                            {
                                <div class="col-md-4 p-b-10">
                                  @*   <video src="/remote.axd?@Model.VideoUrl" controls>
                                        Your browser does not support the video tag.
                                    </video>  *@
                                    <video src="@Model.VideoUrl" controls>
                                        Your browser does not support the video tag.
                                    </video>
                                </div>
                            }
                        </div>
                        <div class="row">                            
                            <div class="col-md-12">
                                @Html.HiddenFor(model => model.VideoUrl, new { htmlAttributes = new { @class = "form-control" } })
                                <input type="file" class="form-control" id="VideoUrlUpdate" name="ImageUrlUpdate" />
                                @Html.ValidationMessageFor(model => model.VideoUrl, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label" })
                        <div class="">
                            @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control input-tags" } })
                            @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.ReasonofReject)
                    @Html.HiddenFor(model => model.Creator)
                    @Html.HiddenFor(model => model.IsVideo)
                    @Html.HiddenFor(model => model.CreatedOn)
                    @Html.HiddenFor(model=>model.CreatedOn)
                    <div class="form-group">
                        <input type="submit" value="Submit" class="btn btn-blue" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" style="z-index:700000">
    <div class="modal-dialog" role="document">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <span class="pull-right fa fa-times cursor-pointer p-10" id="closeBtn"></span>
                <h3 class="no-margin">Image Gallery</h3>
            </div>
            <div class="modal-body m-b-20" style="overflow:auto; height:700px;">
                <div class="p-b-20">
                    <div class="row p-b-10" style="border-bottom:1px solid #eee">
                        <div class="col-lg-12 col-md-12"><h4>Search Filters</h4></div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <input id="inputText" class="form-control" type="text" list="suggestList" />
                            <datalist id="suggestList">
                                <option value="Breaking">Breaking</option>
                            </datalist>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <select class="form-control" id="selSector">
                                <option value="0">All Sector</option>
                                @* @{ Html.RenderAction("GetSectorMenu", "Home", new { filter = "AdminPage" });} *@
                                @await Component.InvokeAsync("SectorMenu", new { filter = "AdminPage" });
                            </select>
                        </div>
                    </div>
                </div>
                <div id="savedImages"></div>
                <div class="text-center loadmore f-16" style="display:none;"><span class="fa fa-circle-o-notch fa-spin fa-fw"></span>Loading</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="newModal" tabindex="-1" role="dialog" style="z-index:700000">
    <div class="modal-dialog" role="document">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <span class="pull-right fa fa-times cursor-pointer p-10" id="cancelBtn"></span>
                <h3 class="no-margin">Image Gallery</h3>
            </div>
            <div class="modal-body m-b-20" style="overflow:auto; height:700px;">
                <div class="p-b-20">
                    <div class="row p-b-10" style="border-bottom:1px solid #eee">
                        <div class="col-lg-12 col-md-12"><h4>Search Filters</h4></div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <input id="textInput" class="form-control" type="text" list="suggList" />
                            <datalist id="suggList">
                                <option value="Breaking">Breaking</option>
                            </datalist>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <select class="form-control" id="selSec">
                                <option value="0">All Sector</option>
                                @* @{ Html.RenderAction("GetSectorMenu", "Home", new { filter = "AdminPage" });} *@
                                @await Component.InvokeAsync("SectorMenu", new { filter = "AdminPage" });
                            </select>
                        </div>
                    </div>
                </div>
                <div id="imageList"></div>
                <div class="text-center loadmore f-16" style="display:none;"><span class="fa fa-circle-o-notch fa-spin fa-fw"></span>Loading</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="instModel" tabindex="-1" role="dialog" style="z-index:700000">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="crossbtn"><img src="/images/contibutor/cross.svg" id="cancelInst" /></div>
            <div class="modal-body">
                <div class="media">
                    <div class="media-left">
                        <div style="width:110px;height:110px">
                            <img src="/images/contibutor/key-instruction.svg" style="height:100px" />
                        </div>
                    </div>
                    <div class="media-body">
                        <div class="inst-title">KEY INSTRUCTIONS</div>
                    </div>
                </div>
                <div class="p-t-20">
                    <p style="font-size:16px;font-weight:500">Please note that Devdiscourse editorial team reserves the right to publish or reject any post. The following are automatic red flags, and will result in the post being rejected without any explanation:</p>
                    <ol style="font-size: 16px; padding: 15px;">
                        <li>The post is plagiarized from anywhere (this will also lead to a permanent ban).</li>
                        <li>The post is a rehash of a piece from any other publication.</li>
                        <li>The article is shorter than 300 words.</li>
                        <li>The article is in a language other than English.</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/Scripts/jquery.multiselect.js"></script>
    <script src="~/Scripts/tagsInput/js/jquery-tagsinput1.3.6jquery.tagsinput.min.js"></script>
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script>
        $(document).ready(function () {
            var _region = "Global Edition";
            var _skip = 0;
            var _sector = "";
            var _title = "";
            var _imgTitle = "";
            var _imgName = "";
            var _imgUrl = "";
            var _imgSector = "0";
            var _country = '@(Model.Country)';
            var _selRegion = '@(Model.Region)';
            var _type = '@(Model.Type)';

            // Select Type
            $('#Type').val(_type);
            // Active Menu Icon
            $(document).find('.linkBtn').removeClass('active');
            $(document).find('#writeLink').addClass('active');

            $('.input-tags').tagsInput();
            $('#Title').keydown(function () {
                $("#title_character").html('Character  Count: ' + $(this).val().length);
            });
            
            tinymce.init({
                selector: '#Description',
                height: 300,
                menubar: false,
                relative_urls: false,
                remove_script_host: false,
                invalid_elements: 'br',
                //entity_encoding: 'raw',
                convert_urls: true,
                plugins: [
                    'advlist autolink lists link image charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen wordcount',
                    'insertdatetime media table contextmenu paste textcolor colorpicker imagetools'
                ],
                setup: function (ed) {
                    ed.on('init', function () {
                        this.getDoc().body.style.fontFamily = 'sans-serif';
                    });
                    ed.on('keyup', function (evt) {
                        var theEditor = tinymce.activeEditor;
                        var wordCount = theEditor.plugins.wordcount.getCount();
                        $("#wordCount").html("[ Words entered: " + wordCount + " ]");
                    });
                    ed.addButton('mybutton', {
                        text: '✓',
                        title: "Strip html",
                        icon: false,
                        onclick: function () {
                            ed.setContent($(ed.getContent()).text());
                        }
                    });
                    ed.addButton('ecButton', {
                        text: 'EC',
                        title: "Embed Code",
                        icon: false,
                        onclick: function () {
                            ed.windowManager.open({
                                title: 'Embed Code',
                                width: 300,
                                height: 90,
                                body: [
                                    { type: 'textbox', name: 'code', multiline: true, label: '' }
                                ],
                                onsubmit: function (e) {
                                    ed.execCommand('mceInsertContent', false, e.data.code);
                                }
                            });
                        }
                    });
                    ed.on('dblclick', function (evt) {
                        var selectedText = tinymce.activeEditor.selection.getContent({ format: 'text' });
                        var _tags = $('#Tags').val();
                        var newTag = _tags + ',' + selectedText;
                        var tagarr = newTag.split(',');
                        for (var i = 0; i < tagarr.length; i++) {
                            $('.tagsinput input').val(tagarr[i]);
                            $('.tagsinput input').blur().removeClass("not_valid");
                        }
                    });
                },
                toolbar: 'undo redo | styleselect | table charmap | forecolor backcolor | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | removeformat pastetext | code | print | mybutton ecButton',
                imagetools_cors_hosts: ['www.tinymce.com', 'http://localhost:61834']
            });
            // For Multiple Select
            $('#Region_multi').multiselect();
            // For Region
            $('#Region').val(_selRegion);
            var regionArray = _selRegion.split(",");
            $.each(regionArray, function (i, item) {
                var regionValue = item.split(" ").join("_");
                var _itemList = [];
                $("#Region_multi_" + regionValue).prop("checked", "checked");
                $("input[name='Region_multi[]']:checked").each(function () {
                    _itemList.push($('label[for="' + this.id + '"]').text());
                });
                $("#RegionList").html(_itemList.join(", "));
            });
            $('input[name="Region_multi[]"]').on("change", function () {
                var valueArray = [];
                $("input[name='Region_multi[]']:checked").each(function () {
                    valueArray.push($('label[for="' + this.id + '"]').text());
                });
                $("#Region").val(valueArray);
                $("#RegionList").html(valueArray.join(", "));
                _selRegion = valueArray.toString();
                getCountries();
            });
            getCountries();
            function getCountries() {
                $.ajax({
                    url: '/Home/GetCountry',
                    type: 'Post',
                    data: { region: _selRegion },
                    dataType: 'Json',
                    success: function (data) {
                        $('#Country_multi').replaceWith(' <select class="form-control" id="Country_multi" multiple="multiple" style="height:100px"></select>');
                        $.each(data, function (i, item) {
                            $('#Country_multi').append('<option value="' + item.title + '">' + item.title + '</option>');
                        });
                        $('#Country_multi').multiselect('refresh');
                        $('.actionButtons').hide();
                        // Auto select Country
                        $('#Country').val(_country);
                        var _carray = _country.split(",");
                        $.each(_carray, function (i, item) {
                            var _value = item.split(" ").join("_");
                            var _itemList = [];
                            $("#Country_multi_" + _value).prop("checked", "checked");
                            $("input[name='Country_multi[]']:checked").each(function () {
                                _itemList.push($('label[for="' + this.id + '"]').text());
                            });
                            $("#CountryList").html(_itemList.join(", "));
                        });
                        $('input[name="Country_multi[]"]').on("change", function () {
                            var valueArray = [];
                            $("input[name='Country_multi[]']:checked").each(function () {
                                valueArray.push($('label[for="' + this.id + '"]').text());
                            });
                            $("#Country").val(valueArray);
                            $("#CountryList").html(valueArray.join(", "));
                        });
                    },
                    error: function () {
                    },
                });
            }
            // Saved Image Gallery
            $(document).on('click', '.mce-filepicker', function () {
                if ($("label[for=" + $(this).attr("id") + "]").text() == "Source") {
                    _skip = 0;
                    $('#myModal').modal();
                    $('.loadmore').show();
                    $.ajax("/Home/GetSavedImages?skip=" + _skip).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
                }
            });
            $('#closeBtn').click(function () {
                $('#myModal').modal('hide');
            });
            $(document).on("click", ".load_MorePics", function () {
                $(this).remove();
                $('.loadmore').show();
                _skip = _skip + 20;
                $.ajax("/Home/GetSavedImages?skip=" + _skip + "&sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $(document).on('click', '.galleryImage', function () {
                var _imageUrl = $(this).attr("id");
                $('#myModal').modal('hide');
                $(document).find('.mce-filepicker .mce-textbox').val(_imageUrl);
            });
            // Double Click select text
            $(".inputText").dblclick(function (e) {
                var selectedText = window.getSelection();
                var _tags = $('#Tags').val();
                var newTag = _tags + ',' + selectedText;
                var tagarr = newTag.split(',');
                for (var i = 0; i < tagarr.length; i++) {
                    $('.tagsinput input').val(tagarr[i]);
                    $('.tagsinput input').blur().removeClass("not_valid");
                }
            });
            $('#selSector').change(function () {
                _sector = $('#selSector').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            $('#textBtn').click(function () {
                _title = $('#inputText').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            $("#inputText").keydown(function (e) {
                if (e.keyCode == 13) {
                    _title = $('#inputText').val();
                    $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
                }
            });
            $(document).on('change', '#inputText', function () {
                _title = $(this).val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            // Image From Gallery
            var _skipCount = 0;
            $('#selFromGallery').click(function () {
                _skipCount = 0;
                $('#newModal').modal();
                $('.loadmore').show();
                $.ajax("/Home/GetSavedImages?skip=" + _skipCount).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $('#cancelBtn').click(function () {
                $('#newModal').modal('hide');
            });
            $(document).on("click", ".load-more", function () {
                $(this).remove();
                $('.loadmore').show();
                _skipCount = _skipCount + 20;
                $.ajax("/Home/GetSavedImages?skip=" + _skipCount + "&sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $(document).on('click', '.selectedImage', function () {
                var _iurl = $(this).attr("id");
                var _ititle = $(this).attr("tabindex");
                $('#newModal').modal('hide');
                $('#ChooseImage').val(_iurl);
                $('#selFromGallery').val(_ititle);
            });
            $('#selSec').change(function () {
                _sector = $('#selSec').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
            $('#searchClick').click(function () {
                _title = $('#textInput').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
            $("#textInput").keydown(function (e) {
                if (e.keyCode == 13) {
                    _title = $('#textInput').val();
                    $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
                }
            });
            $(document).on('change', '#textInput', function () {
                _title = $(this).val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
            // Instruction Dialog Code
            $('#keyInst').click(function () {
                $('#instModel').modal('show');
                $("#instruction").attr("src", "/images/contibutor/key_instr_fill.svg");
            });
            $('#cancelInst').click(function () {
                $('#instModel').modal('hide');
                $("#instruction").attr("src", "/images/contibutor/key_instr_line.svg");
            });
        });
    </script>
}



