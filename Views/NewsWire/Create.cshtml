@model Devdiscourse.Models.Others.NewsWireModel
@{
    ViewBag.Title = "Press Release - Devdiscourse";
    string domainUrl = "https://www.devdiscourse.com";
    string imageUrl = "/AdminFiles/Logo/devediscourse_banner.png";
    ViewBag.PageDescription = "Devdiscourse is World's leading website for International Development News. Get Breaking News on Politics, Business, Technology, Science, Health, Education and Entertainment.";
    ViewBag.webEdition = ViewBag.edition;
    ViewBag.PostUrl = "https://www.devdiscourse.com/contribute";
    ViewBag.pageKeywords = "Development news, Current news, live news, international news in english, latest top news, India news, Africa news, daily news, world news, latest news today, online news, sports news, politics news, health news, science news, technology news, energy news, urban development news, transport news, economy news, finance news, sports news, art and culture news, education news, sports news, Agro-Forestry, social gender, Public Administration, Water and Sanitation";
    var newsImage = imageUrl.IndexOf("devdiscourse.blob.core.windows.net") != -1 ? imageUrl : string.Concat(domainUrl, imageUrl);
    ViewBag.PageImage = newsImage;
}
<link href="~/Content/jquery.multiselect.css" rel="stylesheet" />
<link href="~/Content/admin.css" rel="stylesheet" />
<link href="~/Scripts/tagsInput/css/jquery.tagsinput.min.css" rel="stylesheet" />
<style>
    h1{
        color:#cccccc;
        font-size:50px;
    }
</style>
<div class="container">
    <ul class="breadcrumb breadcrumb_new" style="font-size:14px;">
        <li><a href="@Url.Action("Dashboard", "NewsWire")">Press Release</a></li>
        <li class="active">Submit</li>
    </ul>
    <h1>PRESS RELEASE</h1>
    <div class="row">
        <div class="col-xs-12 col-sm-10">
            <div class="p-t-10">
                <h4>Instructions and Guidelines</h4>
                <ul>
                    <li>All press releases must be in English</li>
                    <li>This service is offered by Devdiscourse.com - no fees are applicable to the companies or the PR agencies submitting news or press releases</li>
                    <li>Please submit your press release in Text or Word format only (.txt or .doc) or you can fill it in our forms content section</li>
                    <li>If you want to add an image, Please ensure that it is in JPEG or PNG format (.jpg or .png)</li>
                    <li>Please ensure that press releases sent to Devdiscourse.com are no more than 48 hours old from date of original release. Articles older than that may not be published.</li>
                    <li>In case of press releases, the source should be of a company or a PR agency. In case of news stories, the content should be able to support the claims made in the article.</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-10" id="formContainer">
            @using (Html.BeginForm("Create", "NewsWire", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
            <div class="form-horizontal p-t-40">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SubTitle, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.SubTitle, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SubTitle, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 col-xs-12">
                        <div class="form-group p-5">
                            @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label" })
                            <div class="">
                                <div id="RegionList" class="showListDiv"></div>
                                <input type="text" class="form-control hidden" id="Region" name="Region" />
                                @Html.DropDownList("Region", null, htmlAttributes: new { @class = "form-control", id = "Region_multi", @multiple = "multiple" })
                                @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-xs-12">
                        <div class="form-group p-5">
                            @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label" })
                            <div class="">
                                <div id="CountryList" class="showListDiv"></div>
                                <input type="text" class="form-control hidden" id="Country" name="Country" />
                                <select class="form-control" id="Country_multi" multiple="multiple" style="height:100px"></select>
                                @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 col-xs-12">
                        <div class="form-group  p-5">
                            @Html.LabelFor(model => model.NewsLabels, htmlAttributes: new { @class = "control-label" })
                            <div class="">
                                @Html.DropDownList("NewsLabels", null, "Select", htmlAttributes: new { @class = "form-control", @size = "23" })
                                @Html.ValidationMessageFor(model => model.NewsLabels, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        <select class="form-control" id="Type" name="Type">
                            <option value="News">News</option>
                            <option value="Blog">Blog</option>
                            <option value="Analysis">Analysis</option>
                            <option value="Opinion">Opinion</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label" id="sourceLabel">Source</label>
                    @*@Html.LabelFor(model => model.Source, htmlAttributes: new { @class = "control-label" })*@
                    <div class="">
                        @Html.EditorFor(model => model.Source, new { htmlAttributes = new { @class = "form-control" } })
                        @*@Html.ValidationMessageFor(model => model.Source, "", new { @class = "text-danger" })*@
                        <div class="text-danger" id="SourceValidation"></div>
                        <p class="text-danger">An inappropriate source will lead to rejection. </p>
                    </div>
                </div>
                <div class="form-group" id="authorImagediv" style="display:none">
                    <label class="control-label">Author Image</label>
                    <div class="">
                        <div style="width:100px;" id="author-img"></div>
                        <input type="file" class="form-control" id="ThemeImg" accept="image/*" />
                        @Html.HiddenFor(model => model.AuthorImage)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label" })
                    <div class="row">
                        <div class="col-md-offset-8 col-md-4" id="showImage"></div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control", type = "file" } })
                            @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-4 text-center" style="padding-top:5px">
                            <strong>OR</strong>
                        </div>
                        <div class="col-md-4">
                            <input type="button" class="btn btn-primary" value="Choose image from gallery" id="selFromGallery" />
                            <input type="text" class="form-control hidden" id="ChooseImage" name="ChooseImage" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ImageCopyright, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.ImageCopyright, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ImageCopyright, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.VideoUrl, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.VideoUrl, new { htmlAttributes = new { @class = "form-control", @type = "file" } })
                        @Html.ValidationMessageFor(model => model.VideoUrl, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control input-tags" } })
                        @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.PublishedDate, htmlAttributes: new { @class = "control-label" })
                    <div class="">
                        @Html.EditorFor(model => model.PublishedDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                        @Html.ValidationMessageFor(model => model.PublishedDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="">
                        <input type="submit" value="Submit" class="btn btn-primary" />
                    </div>
                </div>
            </div>
            }
        </div>
    </div>
</div>
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" style="z-index:700000">
    <div class="modal-dialog" role="document">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <span class="pull-right fa fa-times cursor-pointer p-10" id="closeBtn"></span>
                <h3 class="no-margin">Image Gallery</h3>
            </div>
            <div class="modal-body m-b-20" style="overflow:auto; height:700px;">
                <div class="p-b-20">
                    <div class="row p-b-10" style="border-bottom:1px solid #eee">
                        <div class="col-lg-12 "><h4>Search Filters</h4></div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <input id="inputText" class="form-control" type="text" list="suggestList" />
                            <datalist id="suggestList">
                                <option value="Breaking">Breaking</option>
                            </datalist>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <select class="form-control" id="selSector">
                                <option value="0">All Sector</option>
                                @* @{ Html.RenderAction("GetSectorMenu", "Home", new { filter = "AdminPage" });} *@
                                @await Component.InvokeAsync("SectorMenu", new { filter = "AdminPage" });
                            </select>
                        </div>
                    </div>
                </div>
                <div id="savedImages"></div>
                <div class="text-center loadmore f-16" style="display:none;"><span class="fa fa-circle-o-notch fa-spin fa-fw"></span>Loading</div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="newModal" tabindex="-1" role="dialog" style="z-index:700000">
    <div class="modal-dialog" role="document">
        <div class="modal-content modal-lg">
            <div class="modal-header">
                <span class="pull-right fa fa-times cursor-pointer p-10" id="cancelBtn"></span>
                <h3 class="no-margin">Image Gallery</h3>
            </div>
            <div class="modal-body m-b-20" style="overflow:auto; height:700px;">
                <div class="p-b-20">
                    <div class="row p-b-10" style="border-bottom:1px solid #eee">
                        <div class="col-lg-12 "><h4>Search Filters</h4></div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <input id="textInput" class="form-control" type="text" list="suggList" />
                            <datalist id="suggList">
                                <option value="Breaking">Breaking</option>
                            </datalist>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <select class="form-control" id="selSec">
                                <option value="0">All Sector</option>
                                @* @{ Html.RenderAction("GetSectorMenu", "Home", new { filter = "AdminPage" });} *@
                                @await Component.InvokeAsync("SectorMenu", new { filter = "AdminPage" });
                            </select>
                        </div>
                    </div>
                </div>
                <div id="imageList"></div>
                <div class="text-center loadmore f-16" style="display:none;"><span class="fa fa-circle-o-notch fa-spin fa-fw"></span>Loading</div>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script src="~/Scripts/jquery.multiselect.js"></script>
    <script src="~/Scripts/tagsInput/js/jquery-tagsinput1.3.6jquery.tagsinput.min.js"></script>
<script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script>
        $(document).ready(function () {
            var _region = "Global Edition";
            var _type = "";
            var _skip = 0;
            var _sector = "";
            var _title = "";
            var _imgTitle = "";
            var _imgName = "";
            var _imgUrl = "";
            var _imgSector = "0";

            // Active Menu Icon
            $(document).find('.linkBtn').removeClass('active');
            $(document).find('#pressLink').addClass('active');
            $('#Type').change(function () {
                if ($(this).val() == "News") {
                    $("#sourceLabel").html("Source");
                    $('#authorImagediv').hide();
                } else {
                    $("#sourceLabel").html("Author Name");
                    $('#authorImagediv').show();
                }
            })
            $('.input-tags').tagsInput();
            $('#Source').blur(function () {
                if ($('#Source').val().trim() == "") {
                    $('#SourceValidation').html('Author Name / Source is required.')
                }
            });
            $('#formContainer form').submit(function () {
                if ($('#Source').val().trim() == "") {
                    $('#SourceValidation').html('Author Name / Source is required.');
                    return false;
                }
            });
            tinymce.init({
                selector: '#Description',
                height: 300,
                menubar: false,
                relative_urls: false,
                remove_script_host: false,
                invalid_elements: 'br',
                //entity_encoding: 'raw',
                convert_urls: true,
                plugins: [
                    'advlist autolink lists link image charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen wordcount',
                    'insertdatetime media table contextmenu paste textcolor colorpicker imagetools'
                ],
                setup: function (ed) {
                    ed.on('init', function () {
                        this.getDoc().body.style.fontFamily = 'sans-serif';
                    });
                    ed.on('keyup', function (evt) {
                        var theEditor = tinymce.activeEditor;
                        var wordCount = theEditor.plugins.wordcount.getCount();
                        $("#wordCount").html("[ Words entered: " + wordCount + " ]");
                    });
                    ed.addButton('mybutton', {
                        text: '✓',
                        title: "Strip html",
                        icon: false,
                        onclick: function () {
                            ed.setContent($(ed.getContent()).text());
                        }
                    });
                    ed.addButton('ecButton', {
                        text: 'EC',
                        title: "Embed Code",
                        icon: false,
                        onclick: function () {
                            ed.windowManager.open({
                                title: 'Embed Code',
                                width: 300,
                                height: 90,
                                body: [
                                    { type: 'textbox', name: 'code', multiline: true, label: '' }
                                ],
                                onsubmit: function (e) {
                                    ed.execCommand('mceInsertContent', false, e.data.code);
                                }
                            });
                        }
                    });
                },
                toolbar: 'undo redo | styleselect | table charmap | forecolor backcolor | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | removeformat pastetext | code | print | mybutton ecButton',
                imagetools_cors_hosts: ['www.tinymce.com', 'http://localhost:61834']
            });
            //Author Image
            $("#ThemeImg").change(function () {
                // Checking whether FormData is available in browser
                if (window.FormData !== undefined) {
                    var fileUpload = $("#ThemeImg").get(0);
                    var files = fileUpload.files;
                    // Create FormData object
                    var fileData = new FormData();
                    if (files[0].size > parseInt(4048576)) {
                        //show an alert to the user
                        alert("File size must be less than 4MB", "danger");
                    }
                    else {
                        // Looping over all files and add it to FormData object
                        for (var i = 0; i < files.length; i++) {
                            fileData.append(files[i].name, files[i]);
                        }
                        $.ajax({
                            url: '/UserFiles/UploadAuthorImage',
                            type: "POST",
                            contentType: false, // Not to set any content header
                            processData: false, // Not to process data
                            data: fileData,
                            success: function (data) {
                                if (data == "Error") {
                                    showAlert('Something went wrong!', "danger")
                                } else {
                                    $("#AuthorImage").val(data);
                                    $('.author-img').html('<img src=' + data + ' class="img-responsive" />');
                                }
                            },
                            error: function (err) {
                                showAlert('Something went wrong!', "danger")
                            }
                        });
                    }
                }
                else {
                    alert("FormData is not supported.");
                }
            });

            // For Multiple Select
            $('#Region_multi').multiselect();
            // For Region
            $('input[name="Region_multi[]"]').on("change", function () {
                var valueArray = [];
                $("input[name='Region_multi[]']:checked").each(function () {
                    valueArray.push($('label[for="' + this.id + '"]').text());
                });
                $("#Region").val(valueArray);
                $("#RegionList").html(valueArray.join(", "));
                _region = valueArray.toString();
                if (_region == "") {
                    _region = "Global Edition";
                }
                getCountries();
            });
            getCountries();
            function getCountries() {
                $.ajax({
                    url: '/Home/GetCountry',
                    type: 'Post',
                    data: { region: _region },
                    dataType: 'Json',
                    success: function (data) {
                        $('#Country_multi').replaceWith(' <select class="form-control" id="Country_multi" multiple="multiple" style="height:100px"></select>');
                        $.each(data, function (i, item) {
                            $('#Country_multi').append('<option value="' + item.title + '">' + item.title + '</option>');
                        });
                        $('#Country_multi').multiselect('refresh');

                        $('input[name="Country_multi[]"]').on("change", function () {
                            var valueArray = [];
                            $("input[name='Country_multi[]']:checked").each(function () {
                                valueArray.push($('label[for="' + this.id + '"]').text());
                            });
                            $("#Country").val(valueArray);
                            $("#CountryList").html(valueArray.join(", "));
                        });
                    },
                    error: function () {
                    },
                });
            }
            // Saved Image Gallery
            $(document).on('click', '.mce-filepicker', function () {
                if ($("label[for=" + $(this).attr("id") + "]").text() == "Source") {
                    _skip = 0;
                    $('#myModal').modal();
                    $('.loadmore').show();
                    $.ajax("/Home/GetSavedImages?skip=" + _skip).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
                }
            });
            $('#closeBtn').click(function () {
                $('#myModal').modal('hide');
            });
            $(document).on("click", ".load_MorePics", function () {
                $(this).remove();
                $('.loadmore').show();
                _skip = _skip + 20;
                $.ajax("/Home/GetSavedImages?skip=" + _skip + "&sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $(document).on('click', '.galleryImage', function () {
                var _imageUrl = $(this).attr("id");
                $('#myModal').modal('hide');
                $(document).find('.mce-filepicker .mce-textbox').val(_imageUrl);
            });
            // Double Click select text
            $(".inputText").dblclick(function (e) {
                var selectedText = window.getSelection();
                var _tags = $('#Tags').val();
                var newTag = _tags + ',' + selectedText;
                var tagarr = newTag.split(',');
                for (var i = 0; i < tagarr.length; i++) {
                    $('.tagsinput input').val(tagarr[i]);
                    $('.tagsinput input').blur().removeClass("not_valid");
                }
            });
            // Upload image into gallery
            $('#selSector').change(function () {
                _sector = $('#selSector').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            $('#textBtn').click(function () {
                _title = $('#inputText').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            $("#inputText").keydown(function (e) {
                if (e.keyCode == 13) {
                    _title = $('#inputText').val();
                    $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
                }
            });
            $(document).on('change', '#inputText', function () {
                _title = $(this).val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#savedImages').html("").append(data); $('.lazy').lazy(); });
            });
            // Image From Gallery
            var _skipCount = 0;
            $('#selFromGallery').click(function () {
                _skipCount = 0;
                $('#newModal').modal();
                $('.loadmore').show();
                $.ajax("/Home/GetSavedImages?skip=" + _skipCount).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $('#cancelBtn').click(function () {
                $('#newModal').modal('hide');
            });
            $(document).on("click", ".load-more", function () {
                $(this).remove();
                $('.loadmore').show();
                _skipCount = _skipCount + 20;
                $.ajax("/Home/GetSavedImages?skip=" + _skipCount + "&sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').append(data); $('.lazy').lazy(); $('.loadmore').hide(); });
            });
            $(document).on('click', '.selectedImage', function () {
                var _iurl = $(this).attr("id");
                var _ititle = $(this).attr("tabindex");
                $('#newModal').modal('hide');
                $('#ChooseImage').val(_iurl);
                $('#selFromGallery').val(_ititle);
            });
            $('#selSec').change(function () {
                _sector = $('#selSec').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
            $('#searchClick').click(function () {
                _title = $('#textInput').val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
            $("#textInput").keydown(function (e) {
                if (e.keyCode == 13) {
                    _title = $('#textInput').val();
                    $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
                }
            });
            $(document).on('change', '#textInput', function () {
                _title = $(this).val();
                $.ajax("/Home/GetSavedImages?sector=" + _sector + "&title=" + _title).done(function (data) { $('#imageList').html("").append(data); $('.lazy').lazy(); });
            });
        });
    </script>
}