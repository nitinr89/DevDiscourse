@model Devdiscourse.Models.BasicModels.Job
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout _plain.cshtml";
}
<link href="~/Content/admin.css" rel="stylesheet" />
<style>
    body {
        background-color: #efefef;
    }

    .control-label {
        margin-left: 15px;
    }
</style>
<div class="container bg-white m-t-10 m-b-10 p-b-10 p-t-10">
    <ol class="breadcrumb no-margin">
        <li class="breadcrumb-item"><a href="@Url.Action("AdminView", "Admin")">Admin</a></li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Jobs")">Job</a></li>
        <li class="breadcrumb-item active">Create</li>
    </ol>
</div>
<div class="container bg-white m-b-10">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal p-10">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrganizationName, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.OrganizationName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrganizationName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AboutPosition, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.AboutPosition, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.AboutPosition, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MinCTC, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.MinCTC, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MinCTC, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MaxCTC, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.MaxCTC, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MaxCTC, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Vacancy, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Vacancy, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Vacancy, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MinExperience, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.MinExperience, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MinExperience, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MaxExperience, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.MaxExperience, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MaxExperience, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.OpeningDate, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.OpeningDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.OpeningDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ClosingDate, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ClosingDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.ClosingDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Keywords, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Keywords, new { htmlAttributes = new { @class = "form-control input-tags" } })
                    @Html.ValidationMessageFor(model => model.Keywords, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-12">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </div>
        </div>
    }
</div>
@section scripts {
    <script src="~/Scripts/jquery.multiselect.js"></script>
    <script src="~/Scripts/tagsInput/js/jquery-tagsinput1.3.6jquery.tagsinput.min.js"></script>
    <script src="~/Scripts/tinymce/tinymce.min.js"></script>
    <script>
        $(document).ready(function () {

            $('.input-tags').tagsInput();
            tinymce.init({
                selector: '#AboutPosition',
                height: 300,
                menubar: false,
                convert_urls: true,
                plugins: [
                    'advlist autolink lists link image charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen wordcount',
                    'insertdatetime media table contextmenu paste textcolor colorpicker imagetools'
                ],
                setup: function (ed) {
                    ed.on('init', function () {
                        this.getDoc().body.style.fontFamily = 'sans-serif';
                    });
                    ed.on('keyup', function (evt) {
                        var theEditor = tinymce.activeEditor;
                        var wordCount = theEditor.plugins.wordcount.getCount();
                        $("#wordCount").html("[ Words entered: " + wordCount + " ]");
                    });
                },
                toolbar: 'undo redo | styleselect | table charmap | forecolor backcolor | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | removeformat pastetext | code | print | mybutton',
                imagetools_cors_hosts: ['www.tinymce.com', 'http://localhost:61834']
            });
        });
    </script>
}
